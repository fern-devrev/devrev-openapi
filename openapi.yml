openapi: 3.0.1
info:
  title: DevRev API
  version: ''
paths:
  /artifacts.locate:
    get:
      description: Gets the download URL for the artifact.
      operationId: artifacts_locate
      tags:
        - Artifacts
      parameters:
        - name: id
          in: query
          description: The ID of the artifact to get the URL for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-locate-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: artifacts-locate
      security: &ref_0
        - ApiKeyAuth: []
  /artifacts.prepare:
    post:
      description: |
        Creates an artifact and generates an upload URL for its data.
      operationId: artifacts_prepare
      tags:
        - Artifacts
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-prepare-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: artifacts-prepare
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-prepare-request'
  /dev-orgs.auth-connections.create:
    post:
      description: |
        Creates a new enterprise authentication connection for a Dev
        organization. This authentication connection will not be enabled by
        default for the organization and the user will need to explicitly
        enable this. Keep in mind that at a time, only one authentication
        connection can be enabled for a Dev organization. At present, only 5
        enterprise connections can be created by an organization.
      operationId: authConnection_create
      tags:
        - AuthConnection
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-create-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: dev-org-auth-connections-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-create-request'
  /dev-orgs.auth-connections.delete:
    post:
      description: |
        Deletes an authentication connection. Only enterprise connections which
        are explicitly set up for a Dev organization can be deleted. Default
        connections can not be deleted using this method.
      operationId: authConnection_delete
      tags:
        - AuthConnection
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: dev-org-auth-connections-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-delete-request'
  /dev-orgs.auth-connections.get:
    get:
      description: Retrieves the details for an authentication connection.
      operationId: authConnection_get
      tags:
        - AuthConnection
      parameters:
        - name: id
          in: query
          description: ID of the authentication connection.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-get-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: dev-org-auth-connections-get
      security: *ref_0
  /dev-orgs.auth-connections.list:
    get:
      description: |
        Lists all the authentication connections available for a Dev
        organization. This list will include both social and enterprise
        connections which are either available by default or are explicitly
        created by the user.
      operationId: authConnection_list
      tags:
        - AuthConnection
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-list-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: dev-org-auth-connections-list
      security: *ref_0
  /dev-orgs.auth-connections.toggle:
    post:
      description: |
        Enable or disable an authentication connection for a Dev organization.
        Currently, only 1 authentication connection can be enabled at a time.
        When a new authentication connection is enabled, the connection which
        is currently enabled for the Dev organization is automatically
        disabled.
      operationId: authConnection_toggle
      tags:
        - AuthConnection
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: dev-org-auth-connections-toggle
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-toggle-request'
  /dev-orgs.auth-connections.update:
    post:
      description: Updates an authentication connection.
      operationId: authConnection_update
      tags:
        - AuthConnection
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-update-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: dev-org-auth-connections-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-update-request'
  /auth-tokens.create:
    post:
      description: |
        Creates a JWT corresponding to the requested token type for the
        authenticated user.
      operationId: authTokens_create
      tags:
        - AuthTokens
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-create-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: auth-tokens-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-create-request'
  /auth-tokens.delete:
    post:
      description: |
        Revokes the token that matches the given token ID issued under the
        given Dev organization.
      operationId: authTokens_delete
      tags:
        - AuthTokens
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: auth-tokens-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-delete-request'
  /auth-tokens.get:
    get:
      description: |
        Gets the token metadata corresponding to the given token ID under the
        given Dev organization.
      operationId: authTokens_get
      tags:
        - AuthTokens
      parameters:
        - name: token_id
          in: query
          description: |
            The unique identifier of the token under a given Dev organization.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-get-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: auth-tokens-get
      security: *ref_0
  /auth-tokens.list:
    get:
      description: |
        Gets the token metadata for all the tokens corresponding to the given
        token type issued for a given subject.
      operationId: authTokens_list
      tags:
        - AuthTokens
      parameters:
        - name: client_id
          in: query
          description: |
            An identifier that represents the application, which requested the
            token. Only relevant for application access tokens.
          required: false
          schema:
            type: string
        - name: requested_token_type
          in: query
          description: |
            The type of the requested token. If no value is specified, the
            response will include tokens of all the types.
          required: false
          schema:
            $ref: '#/components/schemas/auth-token-requested-token-type'
        - name: subject
          in: query
          description: |
            The subject associated with the token. In the absence of this
            parameter, the ID of the authenticated entity is treated as the
            subject.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-list-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: auth-tokens-list
      security: *ref_0
  /auth-tokens.self.delete:
    post:
      description: |
        Revokes all the tokens that matches the given token type created by the
        authenticated user.
      operationId: authTokens_selfDelete
      tags:
        - AuthTokens
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: auth-tokens-self-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-self-delete-request'
  /auth-tokens.update:
    post:
      description: |
        Updates token metadata of a token issued under a given Dev
        organization.
      operationId: authTokens_update
      tags:
        - AuthTokens
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-update-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: auth-tokens-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-update-request'
  /dev-users.list:
    get:
      description: Lists users within your organization.
      operationId: devUsers_list
      tags:
        - DevUsers
      parameters:
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: |
            Filters Dev users based on email addresses.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: |
            The maximum number of Dev users to return. The default is '50'.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/list-mode'
        - name: sort_by
          in: query
          description: |
            Fields to sort the Dev users by and the direction to sort them.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: state
          in: query
          description: Filters Dev users based on state.
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/user-state'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-list-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: dev-users-list
      security: *ref_0
  /dev-users.self:
    get:
      description: Gets the authenticated user's information.
      operationId: devUsers_getSelf
      tags:
        - DevUsers
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-self-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: dev-users-self
      security: *ref_0
  /parts.create:
    post:
      description: Creates new [part](https://devrev.ai/docs/product/parts).
      operationId: parts_create
      tags:
        - Parts
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-create-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: parts-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-create-request'
  /parts.delete:
    post:
      description: Deletes a [part](https://devrev.ai/docs/product/parts).
      operationId: parts_delete
      tags:
        - Parts
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-delete-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: parts-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-delete-request'
  /parts.get:
    get:
      description: |
        Gets a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts_get
      tags:
        - Parts
      parameters:
        - name: id
          in: query
          description: The ID of the part to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-get-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: parts-get
      security: *ref_0
  /parts.list:
    get:
      description: |
        Lists a collection of [parts](https://devrev.ai/docs/product/parts).
      operationId: parts_list
      tags:
        - Parts
      parameters:
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            The maximum number of parts to return. The default is '50'.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/list-mode'
        - name: name
          in: query
          description: Filters for parts of the provided name(s).
          required: false
          schema:
            type: array
            items:
              type: string
        - name: type
          in: query
          description: Filters for parts of the provided type(s).
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/part-type'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-list-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: parts-list
      security: *ref_0
  /parts.update:
    post:
      description: |
        Updates a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts_update
      tags:
        - Parts
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-update-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: parts-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-update-request'
  /rev-orgs.create:
    post:
      description: |
        Creates a Rev organization in the authenticated user's Dev
        organization.
      operationId: revOrgs_create
      tags:
        - RevOrgs
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-create-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: rev-orgs-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-create-request'
  /rev-orgs.delete:
    post:
      description: Deletes the Rev organization.
      operationId: revOrgs_delete
      tags:
        - RevOrgs
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-delete-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: rev-orgs-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-delete-request'
  /rev-orgs.get:
    get:
      description: Retrieves the Rev organization's information.
      operationId: revOrgs_get
      tags:
        - RevOrgs
      parameters:
        - name: id
          in: query
          description: The ID of the required Rev organization.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-get-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: rev-orgs-get
      security: *ref_0
  /rev-orgs.list:
    get:
      description: |
        Gets the list of Rev organizations' information belonging to the
        authenticated user's Dev Organization which the user is also authorized
        to access.
      operationId: revOrgs_list
      tags:
        - RevOrgs
      parameters:
        - name: created_by
          in: query
          description: Filters by creator.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: created_date.after
          in: query
          description: >
            Filters for objects created after the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
            format: date-time
        - name: created_date.before
          in: query
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
            format: date-time
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            The maximum number of Rev organizations to be retrieved per page.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/list-mode'
        - name: modified_date.after
          in: query
          description: >
            Filters for objects created after the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
            format: date-time
        - name: modified_date.before
          in: query
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
            format: date-time
        - name: sort_by
          in: query
          description: |
            Fields to sort the Rev organizations by and the direction to sort
            them.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-list-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: rev-orgs-list
      security: *ref_0
  /rev-orgs.update:
    post:
      description: Updates the Rev organization's information.
      operationId: revOrgs_update
      tags:
        - RevOrgs
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-update-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: rev-orgs-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-update-request'
  /tags.create:
    post:
      description: |
        Creates a new tag, which is used to create associations between objects
        and a logical concept denoted by the tag's name.
      operationId: tags_create
      tags:
        - Tags
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-create-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: tags-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-create-request'
  /tags.delete:
    post:
      description: Deletes a tag.
      operationId: tags_delete
      tags:
        - Tags
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-delete-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: tags-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-delete-request'
  /tags.get:
    get:
      description: Gets a tag's information.
      operationId: tags_get
      tags:
        - Tags
      parameters:
        - name: id
          in: query
          description: The requested tag's ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-get-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: tags-get
      security: *ref_0
  /tags.list:
    get:
      description: Lists the available tags.
      operationId: tags_list
      tags:
        - Tags
      parameters:
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of tags to return. The default is '50'.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/list-mode'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-list-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: tags-list
      security: *ref_0
  /tags.update:
    post:
      description: Updates a tag's information.
      operationId: tags_update
      tags:
        - Tags
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-update-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: tags-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-update-request'
  /timeline-entries.create:
    post:
      description: Creates a new entry on an object's timeline.
      operationId: timelineEntries_create
      tags:
        - TimelineEntries
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-create-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: timeline-entries-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-create-request'
  /timeline-entries.get:
    get:
      description: Gets an entry on an object's timeline.
      operationId: timelineEntries_get
      tags:
        - TimelineEntries
      parameters:
        - name: id
          in: query
          description: The ID of the timeline entry to get.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-get-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: timeline-entries-get
      security: *ref_0
  /timeline-entries.list:
    get:
      description: Lists the timeline entries for an object.
      operationId: timelineEntries_list
      tags:
        - TimelineEntries
      parameters:
        - name: object
          in: query
          description: The ID of the object to list timeline entries for.
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            The maximum number of entries to return. If not set, then this
            defaults to `50`.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/list-mode'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-list-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: timeline-entries-list
      security: *ref_0
  /timeline-entries.update:
    post:
      description: Updates an entry on an object's timeline.
      operationId: timelineEntries_update
      tags:
        - TimelineEntries
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-update-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: timeline-entries-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-update-request'
  /webhooks.create:
    post:
      description: Creates a new webhook target.
      operationId: webhooks_create
      tags:
        - Webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-create-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: webhooks-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-create-request'
  /webhooks.delete:
    post:
      description: Deletes the requested webhook.
      operationId: webhooks_delete
      tags:
        - Webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-delete-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: webhooks-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-delete-request'
  /webhooks.get:
    get:
      description: Gets the requested webhook's information.
      operationId: webhooks_get
      tags:
        - Webhooks
      parameters:
        - name: id
          in: query
          description: ID for the webhook.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-get-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: webhooks-get
      security: *ref_0
  /webhooks.list:
    get:
      description: Lists the webhooks.
      operationId: webhooks_list
      tags:
        - Webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-list-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: webhooks-list
      security: *ref_0
  /webhooks.update:
    post:
      description: Updates the requested webhook.
      operationId: webhooks_update
      tags:
        - Webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-update-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: webhooks-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-update-request'
  /works.create:
    post:
      description: |
        Creates new work ([issue](https://devrev.ai/docs/product/build),
        [ticket](https://devrev.ai/docs/product/support)) item.
      operationId: works_create
      tags:
        - Works
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-create-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: works-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-create-request'
  /works.delete:
    post:
      description: Deletes a work item.
      operationId: works_delete
      tags:
        - Works
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-delete-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: works-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-delete-request'
  /works.export:
    get:
      description: Exports a collection of work items.
      operationId: works_export
      tags:
        - Works
      parameters:
        - name: applies_to_part
          in: query
          description: |
            Filters for work belonging to any of the provided parts.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: created_by
          in: query
          description: |
            Filters for work created by any of these users.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: first
          in: query
          description: >
            The number of work items to return. The default is '50', the maximum
            is '5000'.
          required: false
          schema:
            type: integer
        - name: issue.priority
          in: query
          description: |
            Filters for issues with any of the provided priorities.
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/issue-priority'
        - name: owned_by
          in: query
          description: |
            Filters for work owned by any of these users.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: stage.name
          in: query
          description: |
            Filters for records in the provided stage(s).
          required: false
          schema:
            type: array
            items:
              type: string
        - name: target_close_date.after
          in: query
          description: >
            Filters for objects created after the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
            format: date-time
        - name: target_close_date.before
          in: query
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
            format: date-time
        - name: ticket.rev_org
          in: query
          description: |
            Filters for tickets that are associated with any of the provided Rev
            organizations.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ticket.severity
          in: query
          description: |
            Filters for tickets with any of the provided severities.
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ticket-severity'
        - name: type
          in: query
          description: Filters for work of the provided types.
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/work-type'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-export-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: works-export
      security: *ref_0
  /works.get:
    get:
      description: Gets a work item's information.
      operationId: works_get
      tags:
        - Works
      parameters:
        - name: id
          in: query
          description: The work's ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-get-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      security: *ref_0
  /works.list:
    get:
      description: Lists a collection of work items.
      operationId: works_list
      tags:
        - Works
      parameters:
        - name: applies_to_part
          in: query
          description: |
            Filters for work belonging to any of the provided parts.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: created_by
          in: query
          description: |
            Filters for work created by any of these users.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: issue.priority
          in: query
          description: |
            Filters for issues with any of the provided priorities.
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/issue-priority'
        - name: limit
          in: query
          description: |
            The maximum number of works to return. The default is '50'.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/list-mode'
        - name: owned_by
          in: query
          description: |
            Filters for work owned by any of these users.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: stage.name
          in: query
          description: |
            Filters for records in the provided stage(s).
          required: false
          schema:
            type: array
            items:
              type: string
        - name: target_close_date.after
          in: query
          description: >
            Filters for objects created after the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
            format: date-time
        - name: target_close_date.before
          in: query
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
            format: date-time
        - name: ticket.rev_org
          in: query
          description: |
            Filters for tickets that are associated with any of the provided Rev
            organizations.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ticket.severity
          in: query
          description: |
            Filters for tickets with any of the provided severities.
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ticket-severity'
        - name: type
          in: query
          description: Filters for work of the provided types.
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/work-type'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-list-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: works-list
      security: *ref_0
  /works.update:
    post:
      description: Updates a work item's information.
      operationId: works_update
      tags:
        - Works
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-update-response'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request-error-body'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized-error-body'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden-error-body'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-error-body'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/too-many-requests-error-body'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal-server-error-error-body'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-unavailable-error-body'
      summary: works-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-update-request'
components:
  schemas:
    artifacts-locate-response:
      title: artifacts-locate-response
      type: object
      description: The response to getting an artifact's download URL.
      properties:
        expires_at:
          type: string
          format: date-time
          description: The expiration timestamp of the URL.
        url:
          type: string
          description: The artifact's download URL.
      required:
        - url
    artifacts-prepare-request:
      title: artifacts-prepare-request
      type: object
      description: The request to prepare a URL to upload a file.
      properties:
        file_name:
          type: string
          description: The name of the file that's being uploaded.
      required:
        - file_name
    artifacts-prepare-response:
      title: artifacts-prepare-response
      type: object
      description: The response to preparing a URL to upload a file.
      properties:
        form_data:
          type: array
          items:
            $ref: '#/components/schemas/artifacts-prepare-response-form-data'
          description: The POST policy form data.
        id:
          type: string
          description: The generated artifact's ID.
        url:
          type: string
          description: The URL that the file's data should be uploaded to.
      required:
        - form_data
        - id
        - url
    artifacts-prepare-response-form-data:
      title: artifacts-prepare-response-form-data
      type: object
      properties:
        key:
          type: string
          description: Key of the form field.
        value:
          type: string
          description: Value corresponding to the key.
      required:
        - key
        - value
    dev-org-auth-connections-create-request:
      title: dev-org-auth-connections-create-request
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-google-apps'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - google_apps
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-oidc'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - oidc
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-saml'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - samlp
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-azure-ad'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - waad
      description: |
        Request to create a new enterprise authentication connection.
      properties:
        display_name:
          description: |
            Display name of the authentication connection. This name will be
            visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          type: string
    dev-org-auth-connections-create-response:
      title: dev-org-auth-connections-create-response
      type: object
      description: |
        Response for the request to create a new enterprise authentication
        connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/auth-connection'
      required:
        - auth_connection
    dev-org-auth-connections-create-request-type:
      title: dev-org-auth-connections-create-request-type
      type: string
      enum:
        - google_apps
        - oidc
        - samlp
        - waad
      description: |
        Defines the type for the authentication connection. Different types of
        authentication connections have different configuration parameters.
    auth-connection-options-azure-ad:
      title: auth-connection-options-azure-ad
      type: object
      description: |
        Object encapsulating the configuration parameters for an Azure AD
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Azure authentication connection.
        client_secret:
          type: string
          description: Client secret for the Azure authentication connection.
        domain:
          type: string
          description: Domain URL of the Azure authentication connection.
    auth-connection-options-google-apps:
      title: auth-connection-options-google-apps
      type: object
      description: |
        Object encapsulating the configuration parameters for a Google Apps
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Google Apps authentication connection.
        client_secret:
          type: string
          description: |
            Client secret for the Google Apps authentication connection.
        tenant_domain:
          type: string
          description: |
            Tenant domain URL of the Google Apps authentication connection.
    auth-connection-options-oidc:
      title: auth-connection-options-oidc
      type: object
      description: |
        Object encapsulating the configuration parameters for an OIDC
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the OIDC authentication connection.
        client_secret:
          type: string
          description: Client secret for the OIDC authentication connection.
        issuer:
          type: string
          description: Issuer URL of the OIDC authentication connection.
    auth-connection-options-saml:
      title: auth-connection-options-saml
      type: object
      description: |
        Object encapsulating the configuration parameters for a SAML
        authentication connection.
      properties:
        sign_in_endpoint:
          type: string
          description: Sign In endpoint for the SAML authentication connection.
        signing_cert:
          type: string
          description: |
            Signing certificate for the SAML authentication connection.
    auth-connection:
      title: auth-connection
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-google-apps'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - google_apps
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-oidc'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - oidc
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-saml'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - samlp
        - type: object
          properties:
            type:
              type: string
              enum:
                - social
            value:
              $ref: '#/components/schemas/auth-connection-options-social'
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-azure-ad'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - waad
      description: |
        Connection object that specifies the configuration for an
        authentication connection that is set up for a Dev organization.
      properties:
        display_name:
          description: |
            Display name of the authentication connection. This name will be
            visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          type: string
        enabled:
          description: |
            Whether the authentication connection is enabled or disabled. If
            set to false, the authentication connection will not show up on the
            login screen as a login option.
          type: boolean
        id:
          description: ID of the authentication connection.
          type: string
    auth-connection-type:
      title: auth-connection-type
      type: string
      enum:
        - google_apps
        - oidc
        - samlp
        - social
        - waad
      description: |
        Defines the type for the authentication connection. The configuration
        for each authentication connection will depend on the type value.
    auth-connection-options-social:
      title: auth-connection-options-social
      type: object
      additionalProperties: true
    dev-org-auth-connections-delete-request:
      title: dev-org-auth-connections-delete-request
      type: object
      description: |
        Request to delete an enterprise authentication connection for a Dev
        organization. A default connection and a connection which is currently
        enabled cannot be deleted.
      properties:
        id:
          type: string
          description: ID of the authentication connection to be deleted.
      required:
        - id
    dev-org-auth-connections-get-response:
      title: dev-org-auth-connections-get-response
      type: object
      description: |
        Response object encapsulating the configuration details of an
        authentication connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/auth-connection'
      required:
        - auth_connection
    dev-org-auth-connections-list-response:
      title: dev-org-auth-connections-list-response
      type: object
      description: |
        Response object for the request to list all the social and enterprise
        authentication connections configured for a Dev organization.
      properties:
        auth_connections:
          type: array
          items:
            $ref: '#/components/schemas/auth-connection'
          description: |
            List of all the authentication connections currently configured for
            a Dev organization.
      required:
        - auth_connections
    dev-org-auth-connections-toggle-request:
      title: dev-org-auth-connections-toggle-request
      type: object
      description: |
        Request to enable or disable an authentication connection for a Dev
        organization.
      properties:
        id:
          type: string
          description: ID of the authentication connection to be toggled.
        toggle:
          $ref: '#/components/schemas/auth-connection-toggle'
      required:
        - id
    auth-connection-toggle:
      title: auth-connection-toggle
      type: string
      enum:
        - disable
        - enable
    dev-org-auth-connections-update-request:
      title: dev-org-auth-connections-update-request
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-google-apps'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - google_apps
        - type: object
          properties:
            type:
              type: string
              enum:
                - none
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-oidc'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - oidc
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-saml'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - samlp
        - type: object
          allOf:
            - $ref: '#/components/schemas/auth-connection-options-azure-ad'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - waad
      description: |
        Request to update an enterprise authentication connection for a Dev
        organization.
      properties:
        display_name:
          description: |
            New display name of the authentication connection. This name will
            be visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          type: string
        id:
          description: |
            ID of the authentication connection which is to be updated.
          type: string
    dev-org-auth-connections-update-response:
      title: dev-org-auth-connections-update-response
      type: object
      description: |
        Response for the request to update an enterprise authentication
        connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/auth-connection'
      required:
        - auth_connection
    dev-org-auth-connections-update-request-type:
      title: dev-org-auth-connections-update-request-type
      type: string
      enum:
        - google_apps
        - none
        - oidc
        - samlp
        - waad
      description: |
        Specifies the type for the authentication connection. Different types
        of authentication connections have different configuration parameters
        that can be updated.
    auth-tokens-create-request:
      title: auth-tokens-create-request
      type: object
      description: |
        A request to create a new token corresponding to the requested token
        type.
      properties:
        aud:
          type: array
          items:
            type: string
          description: The expected audience values with respect to the token.
        client_id:
          type: string
          description: |
            An identifier that represents the application which is requesting
            the token. If no client_id is present in the request to generate an
            application access token (AAT), DevRev will generate a client_id.
            This client_id is only associated with an AAT.
        expires_in:
          type: integer
          description: |
            The expected validity lifetime of the token in number of days.
        grant_type:
          $ref: '#/components/schemas/auth-token-grant-type'
        requested_token_type:
          $ref: '#/components/schemas/auth-token-requested-token-type'
        rev_info:
          $ref: '#/components/schemas/auth-tokens-rev-info'
        scope:
          type: string
          description: |
            The requested set of scopes associated with the issued token. A
            space-delimited list of values in which the order of values does
            not matter.
        subject_token:
          type: string
          description: |
            Represents the entity that requests the token. Not required when
            requesting an application access token (AAT).
        subject_token_type:
          $ref: '#/components/schemas/auth-token-subject-token-type'
        token_hint:
          type: string
          description: A hint that identifies the token.
    auth-tokens-create-response:
      title: auth-tokens-create-response
      type: object
      description: |
        Response for the request to create a new token corresponding to the
        requested token type.
      properties:
        access_token:
          type: string
          description: |
            The issued JSON Web Token (JWT) corresponding to the requested
            token type.
        client_id:
          type: string
          description: |
            An identifier that represents the application which is requesting
            the token. Only present in a response corresponding to an
            application access token (AAT).
        expires_in:
          type: integer
          description: |
            The validity lifetime of the token specified in seconds since Unix
            epoch.
        refresh_token:
          type: string
          description: A token to refresh the issued token.
        scope:
          type: string
          description: |
            The scopes associated with the issued token. A space-delimited list
            of values in which the order of values does not matter.
        token_type:
          $ref: '#/components/schemas/auth-token-token-type'
      required:
        - access_token
        - expires_in
        - token_type
    auth-token-grant-type:
      title: auth-token-grant-type
      type: string
      enum:
        - urn:devrev:params:oauth:grant-type:token-issue
        - urn:ietf:params:oauth:grant-type:token-exchange
      description: Specifies the process of obtaining a token.
    auth-token-requested-token-type:
      title: auth-token-requested-token-type
      type: string
      enum:
        - urn:devrev:params:oauth:token-type:aat
        - urn:devrev:params:oauth:token-type:aat:public
        - urn:devrev:params:oauth:token-type:dev
        - urn:devrev:params:oauth:token-type:pat
        - urn:devrev:params:oauth:token-type:rev
        - urn:devrev:params:oauth:token-type:session
        - urn:devrev:params:oauth:token-type:session:dev0
        - urn:devrev:params:oauth:token-type:sys
        - urn:ietf:params:oauth:token-type:jwt
      description: The type of the requested token.
    auth-tokens-rev-info:
      title: auth-tokens-rev-info
      type: object
      description: |
        Carries info corresponding to the Rev user to be provisioned and/or
        issue a Rev session token.
      properties:
        org_ref:
          type: string
          description: An identifier which uniquely identifies a Rev org.
        org_traits:
          $ref: '#/components/schemas/auth-tokens-org-traits'
        user_ref:
          type: string
          description: An identifier which uniquely identifies a Rev user.
        user_traits:
          $ref: '#/components/schemas/auth-tokens-user-traits'
      required:
        - user_ref
    auth-tokens-org-traits:
      title: auth-tokens-org-traits
      type: object
      description: Carries Rev org info.
      properties:
        display_name:
          type: string
          description: The display name of the Rev org.
        domain:
          type: string
          description: The domain of the Rev org.
    auth-tokens-user-traits:
      title: auth-tokens-user-traits
      type: object
      description: Carries Rev user info.
      properties:
        display_name:
          type: string
          description: The display name of the Rev user.
        email:
          type: string
          description: The email address of the Rev user.
        full_name:
          type: string
          description: The full name of the Rev user.
    auth-token-subject-token-type:
      title: auth-token-subject-token-type
      type: string
      enum:
        - urn:devrev:params:oauth:token-type:jwt:auth0
        - urn:devrev:params:oauth:token-type:jwt:dev
        - urn:devrev:params:oauth:token-type:revinfo
        - urn:devrev:params:oauth:token-type:sysu
        - urn:devrev:params:oauth:token-type:userinfo
        - urn:devrev:params:oauth:token-type:userinfo:profile
        - urn:ietf:params:oauth:token-type:jwt
      description: The type of the subject token.
    auth-token-token-type:
      title: auth-token-token-type
      type: string
      enum:
        - bearer
      description: |
        The type of the issued token. Bearer is the only supported token type.
    auth-tokens-delete-request:
      title: auth-tokens-delete-request
      type: object
      description: The request to revoke the token.
      properties:
        token_id:
          type: string
          description: |
            The unique identifier for the token under a given Dev organization.
            If no token ID is provided, then the token ID will be set from the
            JTI claim of the token in the authorization header.
    auth-tokens-get-response:
      title: auth-tokens-get-response
      type: object
      description: The response to get the token metadata.
      properties:
        token:
          $ref: '#/components/schemas/auth-token'
      required:
        - token
    auth-token:
      title: auth-token
      type: object
      properties:
        client_id:
          type: string
          description: |
            An identifier that represents the application that requested the
            token. Only applicable for application access tokens.
        expires_at:
          type: string
          format: date-time
          description: The time at which the token expires.
        issued_at:
          type: string
          format: date-time
          description: The time at which the token was issued.
        requested_token_type:
          $ref: '#/components/schemas/auth-token-requested-token-type'
        scopes:
          type: array
          items:
            type: string
          description: The scopes associated with the issued token.
        status:
          $ref: '#/components/schemas/auth-token-status'
        subject:
          type: string
          description: The subject of the token.
        token_hint:
          type: string
          description: A hint that identifies the token.
      allOf:
        - $ref: '#/components/schemas/atom-base'
    auth-token-status:
      title: auth-token-status
      type: string
      enum:
        - active
        - expired
        - revoked
      description: The status of the token.
    auth-tokens-list-response:
      title: auth-tokens-list-response
      type: object
      description: The response to list the token metadata.
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/auth-token'
          description: The list of token metadata.
      required:
        - tokens
    auth-tokens-self-delete-request:
      title: auth-tokens-self-delete-request
      type: object
      description: |
        The request to delete all the tokens created by the authenticated user,
        that match with the provided token type.
      properties:
        requested_token_type:
          $ref: '#/components/schemas/auth-token-requested-token-type'
    auth-tokens-update-request:
      title: auth-tokens-update-request
      type: object
      description: A request to update the token metadata.
      properties:
        token_hint:
          type: string
          description: A hint that identifies the token.
        token_id:
          type: string
          description: |
            The unique identifier of the token under a given Dev organization.
      required:
        - token_hint
        - token_id
    auth-tokens-update-response:
      title: auth-tokens-update-response
      type: object
      description: Response for the request to update the token metadata.
      properties:
        token:
          $ref: '#/components/schemas/auth-token'
      required:
        - token
    atom-base:
      title: atom-base
      type: object
      properties:
        created_by:
          $ref: '#/components/schemas/user-summary'
        created_date:
          type: string
          format: date-time
          description: Timestamp when the object was created.
        display_id:
          type: string
          description: Human-readable object ID unique to the Dev organization.
        id:
          type: string
          description: Globally unique object ID.
        modified_by:
          $ref: '#/components/schemas/user-summary'
        modified_date:
          type: string
          format: date-time
          description: Timestamp when the object was last modified.
      required:
        - id
    user-summary:
      title: user-summary
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/dev-user-summary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - dev_user
        - type: object
          allOf:
            - $ref: '#/components/schemas/rev-user-summary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - rev_user
        - type: object
          allOf:
            - $ref: '#/components/schemas/sys-user-summary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - sys_user
    user-type:
      title: user-type
      type: string
      enum:
        - dev_user
        - rev_user
        - sys_user
    dev-user-summary:
      title: dev-user-summary
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/user-base-summary'
    user-base-summary:
      title: user-base-summary
      type: object
      properties:
        display_name:
          type: string
          description: |
            The user's display name. The name is non-unique and mutable.
        email:
          type: string
          description: Email address of the user.
        full_name:
          type: string
          description: Full name of the user.
        profile_picture:
          type: string
          description: URL of the user's profile picture.
        state:
          $ref: '#/components/schemas/user-state'
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
    atom-base-summary:
      title: atom-base-summary
      type: object
      properties:
        display_id:
          type: string
          description: Human-readable object ID unique to the Dev organization.
        id:
          type: string
          description: Globally unique object ID.
      required:
        - id
    user-state:
      title: user-state
      type: string
      enum:
        - active
        - deactivated
        - locked
        - shadow
        - unassigned
      description: State of the user.
    rev-user-summary:
      title: rev-user-summary
      type: object
      properties:
        rev_org:
          $ref: '#/components/schemas/org-summary'
      allOf:
        - $ref: '#/components/schemas/user-base-summary'
    org-summary:
      title: org-summary
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/rev-org-summary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - rev_org
    org-type:
      title: org-type
      type: string
      enum:
        - rev_org
    rev-org-summary:
      title: rev-org-summary
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/org-base-summary'
    org-base-summary:
      title: org-base-summary
      type: object
      properties:
        display_name:
          type: string
          description: Name of the Organization.
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
    sys-user-summary:
      title: sys-user-summary
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/user-base-summary'
    list-mode:
      title: list-mode
      type: string
      enum:
        - after
        - before
      description: |
        The iteration mode to use. If "after", then entries after the provided
        cursor will be returned, or if no cursor is provided, then from the
        beginning. If "before", then entries before the provided cursor will be
        returned, or if no cursor is provided, then from the end. Entries will
        always be returned in the specified sort-by order.
    part-type:
      title: part-type
      type: string
      enum:
        - product
    artifact-summary:
      title: artifact-summary
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
    stage:
      title: stage
      type: object
      description: Describes the current stage of a work item.
      properties:
        name:
          type: string
          description: Current stage name of the work item.
      required:
        - name
    tag-with-value:
      title: tag-with-value
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/tag-summary'
        value:
          type: string
          description: The value for the object's association with the tag.
      required:
        - tag
    tag-summary:
      title: tag-summary
      type: object
      properties:
        name:
          type: string
          description: |
            The name of the tag, which denotes the logical concept by which all
            tagged objects will be associated. The name is guaranteed to be
            unique.
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
    bad-request-error-body:
      title: bad-request-error-body
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - bad_request
        - type: object
          allOf:
            - $ref: '#/components/schemas/missing-required-field-body'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - missing_required_field
        - type: object
          properties:
            type:
              type: string
              enum:
                - parse_error
      properties:
        message:
          description: The message associated with the error.
          type: string
    missing-required-field-body:
      title: missing-required-field-body
      type: object
      properties:
        field_name:
          type: string
          description: The missing field's name.
      required:
        - field_name
    unauthorized-error-body:
      title: unauthorized-error-body
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - unauthenticated
      properties:
        message:
          description: The message associated with the error.
          type: string
    forbidden-error-body:
      title: forbidden-error-body
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - forbidden
      properties:
        message:
          description: The message associated with the error.
          type: string
    not-found-error-body:
      title: not-found-error-body
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - not_found
      properties:
        message:
          description: The message associated with the error.
          type: string
    too-many-requests-error-body:
      title: too-many-requests-error-body
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - too_many_requests
      properties:
        message:
          description: The message associated with the error.
          type: string
        retry_after:
          description: The number of seconds after which the client should retry.
          type: integer
    internal-server-error-error-body:
      title: internal-server-error-error-body
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - internal_error
      properties:
        message:
          description: The message associated with the error.
          type: string
        reference_id:
          description: >-
            A unique ID that's generated for the error that can be used for
            inquiry.
          type: integer
    service-unavailable-error-body:
      title: service-unavailable-error-body
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - service_unavailable
      properties:
        message:
          description: The message associated with the error.
          type: string
    dev-users-list-response:
      title: dev-users-list-response
      type: object
      description: The response to listing the Dev users.
      properties:
        dev_users:
          type: array
          items:
            $ref: '#/components/schemas/dev-user'
          description: The list of Dev users.
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
      required:
        - dev_users
    dev-user:
      title: dev-user
      type: object
      properties:
        external_identities:
          type: array
          items:
            $ref: '#/components/schemas/external-identity'
          description: IDs of the Dev User outside the DevRev SOR.
      allOf:
        - $ref: '#/components/schemas/user-base'
    user-base:
      title: user-base
      type: object
      properties:
        display_name:
          type: string
          description: |
            The user's display name. The name is non-unique and mutable.
        email:
          type: string
          description: Email address of the user.
        full_name:
          type: string
          description: Full name of the user.
        phone_numbers:
          type: array
          items:
            type: string
          description: Phone numbers of the user.
        profile_picture:
          type: string
          description: URL of the user's profile picture.
        state:
          $ref: '#/components/schemas/user-state'
      allOf:
        - $ref: '#/components/schemas/atom-base'
    external-identity:
      title: external-identity
      type: object
      additionalProperties: true
      description: External identity of a user.
    dev-users-self-response:
      title: dev-users-self-response
      type: object
      description: |
        The response to getting the information for the authenticated user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - dev_user
    parts-create-request:
      title: parts-create-request
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - capability
            value:
              $ref: '#/components/schemas/parts-create-request-capability'
        - type: object
          properties:
            type:
              type: string
              enum:
                - feature
            value:
              $ref: '#/components/schemas/parts-create-request-feature'
        - type: object
          properties:
            type:
              type: string
              enum:
                - product
            value:
              $ref: '#/components/schemas/parts-create-request-product'
      properties:
        description:
          description: Description of the part.
          type: string
        name:
          description: Name of the part.
          type: string
        owned_by:
          description: The users that own the part.
          type: array
          items:
            type: string
    parts-create-response:
      title: parts-create-response
      type: object
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
        - part
    parts-create-request-capability:
      title: parts-create-request-capability
      type: object
      additionalProperties: true
    parts-create-request-feature:
      title: parts-create-request-feature
      type: object
      additionalProperties: true
    parts-create-request-product:
      title: parts-create-request-product
      type: object
      additionalProperties: true
    part:
      title: part
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/product'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - product
    product:
      title: product
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/part-base'
    part-base:
      title: part-base
      type: object
      properties:
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/artifact-summary'
          description: The attached artifacts.
        description:
          type: string
          description: Description of the part.
        name:
          type: string
          description: Name of the part.
        owned_by:
          type: array
          items:
            $ref: '#/components/schemas/user-summary'
          description: The users that own the part.
        stage:
          $ref: '#/components/schemas/stage'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/tag-with-value'
          description: Tags associated with the object.
      required:
        - owned_by
      allOf:
        - $ref: '#/components/schemas/atom-base'
    parts-delete-request:
      title: parts-delete-request
      type: object
      properties:
        id:
          type: string
          description: The ID of the part to delete.
      required:
        - id
    parts-delete-response:
      title: parts-delete-response
      type: object
      additionalProperties: true
    parts-get-response:
      title: parts-get-response
      type: object
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
        - part
    parts-list-response:
      title: parts-list-response
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        parts:
          type: array
          items:
            $ref: '#/components/schemas/part'
          description: The list of parts.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
      required:
        - parts
    parts-update-request:
      title: parts-update-request
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - capability
            value:
              $ref: '#/components/schemas/parts-update-request-capability'
        - type: object
          properties:
            type:
              type: string
              enum:
                - feature
            value:
              $ref: '#/components/schemas/parts-update-request-feature'
        - type: object
          properties:
            type:
              type: string
              enum:
                - none
        - type: object
          properties:
            type:
              type: string
              enum:
                - product
            value:
              $ref: '#/components/schemas/parts-update-request-product'
      properties:
        description:
          description: The updated description of the part.
          type: string
        id:
          description: The ID of the part to update.
          type: string
        name:
          description: The updated name of the part.
          type: string
    parts-update-response:
      title: parts-update-response
      type: object
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
        - part
    parts-update-request-capability:
      title: parts-update-request-capability
      type: object
      additionalProperties: true
    parts-update-request-feature:
      title: parts-update-request-feature
      type: object
      additionalProperties: true
    parts-update-request-product:
      title: parts-update-request-product
      type: object
      additionalProperties: true
    rev-orgs-create-request:
      title: rev-orgs-create-request
      type: object
      description: |
        Request object to create a new Rev organization in the Dev
        organization.
      properties:
        description:
          type: string
          description: Description of the Rev organization.
        display_name:
          type: string
          description: Name of the Rev organization.
        domain:
          type: string
          description: Company's domain name. Example - 'devrev.ai'.
        environment:
          $ref: '#/components/schemas/org-environment'
        external_ref:
          type: string
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
      required:
        - display_name
    rev-orgs-create-response:
      title: rev-orgs-create-response
      type: object
      description: |
        Response object for request to create a new Rev organization.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
        - rev_org
    org-environment:
      title: org-environment
      type: string
      enum:
        - production
        - staging
        - test
      description: |
        The environment of the Org. Defaults to 'production' if not specified.
    rev-org:
      title: rev-org
      type: object
      properties:
        description:
          type: string
          description: Description of the Rev organization.
        domain:
          type: string
          description: Company's domain name. Example - 'devrev.ai'.
        external_ref:
          type: string
          description: |
            External ref is a unique identifier for the Rev (customer)
            organization from your primary customer system of records. If none
            is specified, a system-generated identifier will be assigned to the
            organization.
      allOf:
        - $ref: '#/components/schemas/org-base'
    org-base:
      title: org-base
      type: object
      properties:
        display_name:
          type: string
          description: Name of the Organization.
      allOf:
        - $ref: '#/components/schemas/atom-base'
    rev-orgs-delete-request:
      title: rev-orgs-delete-request
      type: object
      description: Request object to delete a Rev organization.
      properties:
        id:
          type: string
          description: The ID of Rev organization to delete.
      required:
        - id
    rev-orgs-delete-response:
      title: rev-orgs-delete-response
      type: object
      additionalProperties: true
      description: The response to deleting a Rev organization.
    rev-orgs-get-response:
      title: rev-orgs-get-response
      type: object
      description: The response to getting a Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
        - rev_org
    rev-orgs-list-response:
      title: rev-orgs-list-response
      type: object
      description: |
        The response to getting a list of Rev organizations' information.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
        rev_orgs:
          type: array
          items:
            $ref: '#/components/schemas/rev-org'
          description: List with all of the Rev organizations' information.
      required:
        - rev_orgs
    rev-orgs-update-request:
      title: rev-orgs-update-request
      type: object
      description: |
        Request object to update information of the Rev organization.
      properties:
        description:
          type: string
          description: Description of the Rev organization.
        display_name:
          type: string
          description: Customer chosen name for the Rev organization.
        domain:
          type: string
          description: Company's domain name. Example - 'devrev.ai'.
        environment:
          $ref: '#/components/schemas/org-environment'
        external_ref:
          type: string
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
        id:
          type: string
          description: The ID of Rev organization to update.
      required:
        - id
    rev-orgs-update-response:
      title: rev-orgs-update-response
      type: object
      description: Response object to updating Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
        - rev_org
    tags-create-request:
      title: tags-create-request
      type: object
      description: The request to create a new tag.
      properties:
        allowed_values:
          type: array
          items:
            type: string
          description: |
            The allowed values for the tag, or empty if no values are
            permitted.
        description:
          type: string
          description: The description for the tag.
        name:
          type: string
          description: |
            The name for the tag, which must be unique across all tags.
      required:
        - name
    tags-create-response:
      title: tags-create-response
      type: object
      description: The response to creating a new tag.
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
        - tag
    tag:
      title: tag
      type: object
      properties:
        allowed_values:
          type: array
          items:
            type: string
          description: |
            The allowed values for the tag, where a value is provided when a
            tag is associated with an object. If empty, then no value should be
            provided when the association is made.
        description:
          type: string
          description: |
            An informative description for the tag that should provide context
            on the tag's purpose and usage.
        name:
          type: string
          description: |
            The name of the tag, which denotes the logical concept by which all
            tagged objects will be associated. The name is guaranteed to be
            unique.
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/atom-base'
    tags-delete-request:
      title: tags-delete-request
      type: object
      description: The request to delete a tag.
      properties:
        id:
          type: string
          description: The ID of the tag to delete.
      required:
        - id
    tags-delete-response:
      title: tags-delete-response
      type: object
      additionalProperties: true
      description: The response for deleting a tag.
    tags-get-response:
      title: tags-get-response
      type: object
      description: The response to getting a tag's information.
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
        - tag
    tags-list-response:
      title: tags-list-response
      type: object
      description: The response to listing the tags.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/tag'
          description: The list of tags.
      required:
        - tags
    tags-update-request:
      title: tags-update-request
      type: object
      description: The request to update a tag.
      properties:
        allowed_values:
          $ref: '#/components/schemas/tags-update-allowed-values'
        description:
          type: string
          description: The updated description of the tag.
        id:
          type: string
          description: The ID of the tag to update.
        name:
          type: string
          description: |
            The updated name of the tag. The name must be unique across all
            tags.
      required:
        - id
    tags-update-response:
      title: tags-update-response
      type: object
      description: The response for updating a tag.
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
        - tag
    tags-update-allowed-values:
      title: tags-update-allowed-values
      type: object
      description: Specifies an update to a tag's allowed values.
      properties:
        set:
          type: array
          items:
            type: string
          description: Sets the allowed values for the tag.
    timeline-entries-create-request:
      title: timeline-entries-create-request
      oneOf:
        - type: object
          allOf:
            - $ref: >-
                #/components/schemas/timeline-entries-create-request-timeline-comment
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - timeline_comment
      description: The request to create a timeline entry for an object.
      properties:
        object:
          description: The ID of the object to create the timeline entry for.
          type: string
    timeline-entries-create-response:
      title: timeline-entries-create-response
      type: object
      description: The response to creating a timeline entry for an object.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
        - timeline_entry
    timeline-entries-create-request-type:
      title: timeline-entries-create-request-type
      type: string
      enum:
        - timeline_comment
    timeline-entries-create-request-timeline-comment:
      title: timeline-entries-create-request-timeline-comment
      type: object
      properties:
        body:
          type: string
          description: The comment's body.
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        snap_kit_body:
          type: object
          additionalProperties: true
          description: The SnapKit body of the comment.
    timeline-comment-body-type:
      title: timeline-comment-body-type
      type: string
      enum:
        - snap_kit
        - text
      description: The type of the body to use for the comment.
    timeline-entry:
      title: timeline-entry
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/timeline-comment'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - timeline_comment
    timeline-entry-type:
      title: timeline-entry-type
      type: string
      enum:
        - timeline_comment
    timeline-comment:
      title: timeline-comment
      type: object
      properties:
        body:
          type: string
          description: |
            The comment's body. If the comment has been deleted, then no body
            will appear in the response.
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        snap_kit_body:
          type: object
          additionalProperties: true
          description: The SnapKit Body of the comment.
      allOf:
        - $ref: '#/components/schemas/timeline-entry-base'
    timeline-entry-base:
      title: timeline-entry-base
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/atom-base'
    timeline-entries-get-response:
      title: timeline-entries-get-response
      type: object
      description: The request to getting a timeline entry.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
        - timeline_entry
    timeline-entries-list-response:
      title: timeline-entries-list-response
      type: object
      description: The response to listing timeline entries for an object.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
        timeline_entries:
          type: array
          items:
            $ref: '#/components/schemas/timeline-entry'
          description: The timeline entries for the object.
      required:
        - timeline_entries
    timeline-entries-update-request:
      title: timeline-entries-update-request
      oneOf:
        - type: object
          allOf:
            - $ref: >-
                #/components/schemas/timeline-entries-update-request-timeline-comment
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - timeline_comment
      description: The request to update a timeline entry.
      properties:
        id:
          description: The ID of the timeline entry to update.
          type: string
    timeline-entries-update-response:
      title: timeline-entries-update-response
      type: object
      description: The response to updating a timeline entry.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
        - timeline_entry
    timeline-entries-update-request-type:
      title: timeline-entries-update-request-type
      type: string
      enum:
        - timeline_comment
    timeline-entries-update-request-timeline-comment:
      title: timeline-entries-update-request-timeline-comment
      type: object
      properties:
        body:
          type: string
          description: The updated comment's body.
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        snap_kit_body:
          type: object
          additionalProperties: true
          description: The SnapKit body of the comment.
    webhooks-create-request:
      title: webhooks-create-request
      type: object
      description: The request to create a new webhook.
      properties:
        event_types:
          type: array
          items:
            $ref: '#/components/schemas/webhook-event-type'
          description: The event types that the webhook endpoint will receive.
        secret:
          type: string
          description: |
            The secret to use when verifying webhook events. If provided, the
            secret must be between 8 and 32 bytes (inclusive). If not set, a
            secret will be automatically generated and provided in the
            response.
        url:
          type: string
          description: The URL of the webhook endpoint.
      required:
        - url
    webhooks-create-response:
      title: webhooks-create-response
      type: object
      description: The response to creating a new webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
        - webhook
    webhook-event-type:
      title: webhook-event-type
      type: string
      enum:
        - part_created
        - part_deleted
        - part_updated
        - rev_org_created
        - rev_org_deleted
        - rev_org_updated
        - tag_created
        - tag_deleted
        - tag_updated
        - timeline_entry_created
        - timeline_entry_deleted
        - timeline_entry_updated
        - verify
        - work_created
        - work_deleted
        - work_updated
      description: The event types that the webhook will receive.
    webhook:
      title: webhook
      type: object
      properties:
        event_types:
          type: array
          items:
            $ref: '#/components/schemas/webhook-event-type'
          description: The event types that the webhook will receive.
        secret:
          type: string
          description: The secret to use for verifying webhook events.
        status:
          $ref: '#/components/schemas/webhook-status'
        url:
          type: string
          description: The URL of the webhook endpoint.
      required:
        - secret
        - status
        - url
      allOf:
        - $ref: '#/components/schemas/atom-base'
    webhook-status:
      title: webhook-status
      type: string
      enum:
        - active
        - inactive
        - unverified
      description: The status of the webhook.
    webhooks-delete-request:
      title: webhooks-delete-request
      type: object
      description: The request to delete a webhook.
      properties:
        id:
          type: string
          description: ID for the webhook.
      required:
        - id
    webhooks-delete-response:
      title: webhooks-delete-response
      type: object
      additionalProperties: true
      description: The response to deleting the webhook.
    webhooks-get-response:
      title: webhooks-get-response
      type: object
      description: The response to getting the information for the webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
        - webhook
    webhooks-list-response:
      title: webhooks-list-response
      type: object
      description: The response to listing the webhooks.
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/webhook'
          description: The list of webhooks.
      required:
        - webhooks
    webhooks-update-request:
      title: webhooks-update-request
      type: object
      description: The request to update a webhook.
      properties:
        action:
          $ref: '#/components/schemas/webhooks-update-action'
        event_types:
          $ref: '#/components/schemas/webhooks-update-request-event-types'
        id:
          type: string
          description: ID for the webhook.
        secret:
          type: string
          description: |
            If provided, updates the secret that's used when verifying webhook
            events, which must be between 8 and 32 bytes (inclusive). Otherwise
            if empty, then a new secret is generated. If the webhook is active,
            then its status will transition to the 'unverified' state and it
            won't receive any object events until successfully verified.
        url:
          type: string
          description: |
            The webhook's updated URL. If the webhook is active, then the
            webhook's status will transition to the 'unverified' state and it
            won't receive any object events until successfully verified.
      required:
        - id
    webhooks-update-response:
      title: webhooks-update-response
      type: object
      description: The response to updating the webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
        - webhook
    webhooks-update-action:
      title: webhooks-update-action
      type: string
      enum:
        - activate
        - deactivate
      description: The action to update the webhook's status.
    webhooks-update-request-event-types:
      title: webhooks-update-request-event-types
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/webhook-event-type'
          description: |
            The event types to add. If a provided event type is already set for
            the webhook, then nothing is done. Note this is mutually exclusive
            with 'set'.
        remove:
          type: array
          items:
            $ref: '#/components/schemas/webhook-event-type'
          description: |
            The event types to remove. If a provided event type isn't set for
            the webhook, then nothing is done. Note this is mutually exclusive
            with 'set'.
        set:
          type: array
          items:
            $ref: '#/components/schemas/webhook-event-type'
          description: |
            The updated event types, which will replace the webhook's current
            event types. Note this is mutually exclusive with 'add' and
            'remove'.
    works-create-request:
      title: works-create-request
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/works-create-request-issue'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - issue
        - type: object
          allOf:
            - $ref: '#/components/schemas/works-create-request-ticket'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - ticket
      properties:
        applies_to_part:
          description: |
            The [part](https://devrev.ai/docs/product/parts) that the work
            applies to. Specifying a part is required when creating tickets and
            issues.
          type: string
        artifacts:
          description: |
            The IDs of the artifacts to associate with the work item.
          type: array
          items:
            type: string
        body:
          description: Body of the work object.
          type: string
        owned_by:
          description: The users that own the work.
          type: array
          items:
            type: string
        reported_by:
          description: The users that reported the work.
          type: array
          items:
            type: string
        stage:
          $ref: '#/components/schemas/stage-init'
        tags:
          description: Tags associated with the work item.
          type: array
          items:
            $ref: '#/components/schemas/set-tag-with-value'
        target_close_date:
          description: Timestamp for when the work is expected to be complete.
          type: string
          format: date-time
        title:
          description: Title of the work object.
          type: string
    works-create-response:
      title: works-create-response
      type: object
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
        - work
    stage-init:
      title: stage-init
      type: object
      description: Sets an object's initial stage.
      properties:
        name:
          type: string
          description: The name of the stage.
      required:
        - name
    set-tag-with-value:
      title: set-tag-with-value
      type: object
      properties:
        id:
          type: string
          description: The ID of the tag.
        value:
          type: string
          description: |
            The value for the object's association with the tag. If specified,
            the value must be one that's specified in the tag's allowed values.
      required:
        - id
    work-type:
      title: work-type
      type: string
      enum:
        - issue
        - ticket
    works-create-request-issue:
      title: works-create-request-issue
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/issue-priority'
    issue-priority:
      title: issue-priority
      type: string
      enum:
        - p0
        - p1
        - p2
        - p3
      description: Priority of the work based upon impact and criticality.
    works-create-request-ticket:
      title: works-create-request-ticket
      type: object
      properties:
        rev_org:
          type: string
          description: The Rev organization that the ticket is associated with.
        severity:
          $ref: '#/components/schemas/ticket-severity'
    ticket-severity:
      title: ticket-severity
      type: string
      enum:
        - blocker
        - high
        - low
        - medium
      description: Severity of the ticket.
    work:
      title: work
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/issue'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - issue
        - type: object
          allOf:
            - $ref: '#/components/schemas/ticket'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - ticket
    issue:
      title: issue
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/issue-priority'
      allOf:
        - $ref: '#/components/schemas/work-base'
    work-base:
      title: work-base
      type: object
      properties:
        applies_to_part:
          $ref: '#/components/schemas/part-summary'
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/artifact-summary'
          description: The artifacts attached to the work item.
        body:
          type: string
          description: Body of the work object.
        owned_by:
          type: array
          items:
            $ref: '#/components/schemas/user-summary'
          description: The users that own the work.
        reported_by:
          type: array
          items:
            $ref: '#/components/schemas/user-summary'
          description: Users that reported the work.
        stage:
          $ref: '#/components/schemas/stage'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/tag-with-value'
          description: Tags associated with the object.
        target_close_date:
          type: string
          format: date-time
          description: Timestamp when the work is expected to be complete.
        title:
          type: string
          description: Title of the work object.
      required:
        - owned_by
        - title
      allOf:
        - $ref: '#/components/schemas/atom-base'
    part-summary:
      title: part-summary
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/product-summary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - product
    product-summary:
      title: product-summary
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/part-base-summary'
    part-base-summary:
      title: part-base-summary
      type: object
      properties:
        name:
          type: string
          description: Name of the part.
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
    ticket:
      title: ticket
      type: object
      properties:
        rev_org:
          $ref: '#/components/schemas/org-summary'
        severity:
          $ref: '#/components/schemas/ticket-severity'
      allOf:
        - $ref: '#/components/schemas/work-base'
    works-delete-request:
      title: works-delete-request
      type: object
      properties:
        id:
          type: string
          description: The work's ID.
      required:
        - id
    works-delete-response:
      title: works-delete-response
      type: object
      additionalProperties: true
    works-export-response:
      title: works-export-response
      type: object
      properties:
        works:
          type: array
          items:
            $ref: '#/components/schemas/work'
          description: The resulting collection of work items.
      required:
        - works
    works-get-response:
      title: works-get-response
      type: object
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
        - work
    works-list-response:
      title: works-list-response
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
        works:
          type: array
          items:
            $ref: '#/components/schemas/work'
          description: The list of works.
      required:
        - works
    works-update-request:
      title: works-update-request
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/works-update-request-issue'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - issue
        - type: object
          properties:
            type:
              type: string
              enum:
                - none
        - type: object
          allOf:
            - $ref: '#/components/schemas/works-update-request-ticket'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - ticket
      properties:
        applies_to_part:
          description: Updates the part that the work applies to.
          type: string
        artifacts:
          $ref: '#/components/schemas/works-update-request-artifact-ids'
        body:
          description: |
            Updated body of the work object, or unchanged if not provided.
          type: string
        custom_schema_fragments:
          description: The custom schema fragments to use.
          type: array
          items:
            type: string
        id:
          description: The work's ID.
          type: string
        owned_by:
          $ref: '#/components/schemas/works-update-request-owned-by'
        reported_by:
          $ref: '#/components/schemas/works-update-request-reported-by'
        stage:
          $ref: '#/components/schemas/stage-update'
        tags:
          $ref: '#/components/schemas/works-update-request-tags'
        target_close_date:
          description: |
            Updates the timestamp for when the work is expected to be complete.
          type: string
          format: date-time
        title:
          description: |
            Updated title of the work object, or unchanged if not provided.
          type: string
    works-update-response:
      title: works-update-response
      type: object
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
        - work
    works-update-request-artifact-ids:
      title: works-update-request-artifact-ids
      type: object
      properties:
        set:
          type: array
          items:
            type: string
          description: Sets the IDs to the provided artifact IDs.
    works-update-request-owned-by:
      title: works-update-request-owned-by
      type: object
      properties:
        set:
          type: array
          items:
            type: string
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
    works-update-request-reported-by:
      title: works-update-request-reported-by
      type: object
      properties:
        set:
          type: array
          items:
            type: string
          description: |
            Sets the users that reported the work to the provided user IDs.
    stage-update:
      title: stage-update
      type: object
      description: Updates an object's stage.
      properties:
        name:
          type: string
          description: |
            The updated name of the stage, otherwise unchanged if not set.
    works-update-request-tags:
      title: works-update-request-tags
      type: object
      properties:
        set:
          type: array
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          description: Sets the provided tags on the work item.
    works-update-request-issue:
      title: works-update-request-issue
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/issue-priority'
    works-update-request-ticket:
      title: works-update-request-ticket
      type: object
      properties:
        rev_org:
          type: string
          description: |
            Updates the Rev organization that the ticket is associated with.
        severity:
          $ref: '#/components/schemas/ticket-severity'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
servers:
  - url: https://api.devrev.ai
    description: Production
