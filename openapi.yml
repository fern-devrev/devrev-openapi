openapi: 3.0.1
info:
  title: DevRev API
  version: ''
paths:
  /artifacts.locate:
    get:
      description: Gets the download URL for the artifact.
      operationId: artifacts_locate
      tags:
        - Artifacts
      parameters:
        - name: id
          in: query
          description: The ID of the artifact to get the URL for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsLocateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: artifacts-locate
      security: &ref_0
        - ApiKeyAuth: []
  /artifacts.prepare:
    post:
      description: |
        Creates an artifact and generates an upload URL for its data.
      operationId: artifacts_prepare
      tags:
        - Artifacts
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsPrepareResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: artifacts-prepare
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtifactsPrepareRequest'
  /dev-orgs.auth-connections.create:
    post:
      description: |
        Creates a new enterprise authentication connection for a Dev
        organization. This authentication connection will not be enabled by
        default for the organization and the user will need to explicitly
        enable this. Keep in mind that at a time, only one authentication
        connection can be enabled for a Dev organization. At present, only 5
        enterprise connections can be created by an organization.
      operationId: authConnection_create
      tags:
        - AuthConnection
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevOrgAuthConnectionsCreateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: dev-org-auth-connections-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevOrgAuthConnectionsCreateRequest'
  /dev-orgs.auth-connections.delete:
    post:
      description: |
        Deletes an authentication connection. Only enterprise connections which
        are explicitly set up for a Dev organization can be deleted. Default
        connections can not be deleted using this method.
      operationId: authConnection_delete
      tags:
        - AuthConnection
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: dev-org-auth-connections-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevOrgAuthConnectionsDeleteRequest'
  /dev-orgs.auth-connections.get:
    get:
      description: Retrieves the details for an authentication connection.
      operationId: authConnection_get
      tags:
        - AuthConnection
      parameters:
        - name: id
          in: query
          description: ID of the authentication connection.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevOrgAuthConnectionsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: dev-org-auth-connections-get
      security: *ref_0
  /dev-orgs.auth-connections.list:
    get:
      description: |
        Lists all the authentication connections available for a Dev
        organization. This list will include both social and enterprise
        connections which are either available by default or are explicitly
        created by the user.
      operationId: authConnection_list
      tags:
        - AuthConnection
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevOrgAuthConnectionsListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: dev-org-auth-connections-list
      security: *ref_0
  /dev-orgs.auth-connections.toggle:
    post:
      description: |
        Enable or disable an authentication connection for a Dev organization.
        Currently, only 1 authentication connection can be enabled at a time.
        When a new authentication connection is enabled, the connection which
        is currently enabled for the Dev organization is automatically
        disabled.
      operationId: authConnection_toggle
      tags:
        - AuthConnection
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: dev-org-auth-connections-toggle
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevOrgAuthConnectionsToggleRequest'
  /dev-orgs.auth-connections.update:
    post:
      description: Updates an authentication connection.
      operationId: authConnection_update
      tags:
        - AuthConnection
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevOrgAuthConnectionsUpdateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: dev-org-auth-connections-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevOrgAuthConnectionsUpdateRequest'
  /auth-tokens.create:
    post:
      description: |
        Creates a JWT corresponding to the requested token type for the
        authenticated user.
      operationId: authTokens_create
      tags:
        - AuthTokens
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokensCreateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: auth-tokens-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokensCreateRequest'
  /auth-tokens.delete:
    post:
      description: |
        Revokes the token that matches the given token ID issued under the
        given Dev organization.
      operationId: authTokens_delete
      tags:
        - AuthTokens
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: auth-tokens-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokensDeleteRequest'
  /auth-tokens.get:
    get:
      description: |
        Gets the token metadata corresponding to the given token ID under the
        given Dev organization.
      operationId: authTokens_get
      tags:
        - AuthTokens
      parameters:
        - name: token_id
          in: query
          description: |
            The unique identifier of the token under a given Dev organization.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokensGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: auth-tokens-get
      security: *ref_0
  /auth-tokens.list:
    get:
      description: |
        Gets the token metadata for all the tokens corresponding to the given
        token type issued for a given subject.
      operationId: authTokens_list
      tags:
        - AuthTokens
      parameters:
        - name: client_id
          in: query
          description: |
            An identifier that represents the application, which requested the
            token. Only relevant for application access tokens.
          required: false
          schema:
            type: string
        - name: requested_token_type
          in: query
          description: |
            The type of the requested token. If no value is specified, the
            response will include tokens of all the types.
          required: false
          schema:
            $ref: '#/components/schemas/AuthTokenRequestedTokenType'
        - name: subject
          in: query
          description: |
            The subject associated with the token. In the absence of this
            parameter, the ID of the authenticated entity is treated as the
            subject.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokensListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: auth-tokens-list
      security: *ref_0
  /auth-tokens.self.delete:
    post:
      description: |
        Revokes all the tokens that matches the given token type created by the
        authenticated user.
      operationId: authTokens_selfDelete
      tags:
        - AuthTokens
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: auth-tokens-self-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokensSelfDeleteRequest'
  /auth-tokens.update:
    post:
      description: |
        Updates token metadata of a token issued under a given Dev
        organization.
      operationId: authTokens_update
      tags:
        - AuthTokens
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokensUpdateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: auth-tokens-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokensUpdateRequest'
  /dev-users.list:
    get:
      description: Lists users within your organization.
      operationId: devUsers_list
      tags:
        - DevUsers
      parameters:
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: |
            Filters Dev users based on email addresses.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            The maximum number of Dev users to return. The default is '50'.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/ListMode'
        - name: sort_by
          in: query
          description: |
            Fields to sort the Dev users by and the direction to sort them.
          required: false
          schema:
            type: string
        - name: state
          in: query
          description: Filters Dev users based on state.
          required: false
          schema:
            $ref: '#/components/schemas/UserState'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevUsersListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: dev-users-list
      security: *ref_0
  /dev-users.self:
    get:
      description: Gets the authenticated user's information.
      operationId: devUsers_getSelf
      tags:
        - DevUsers
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevUsersSelfResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: dev-users-self
      security: *ref_0
  /parts.create:
    post:
      description: Creates new [part](https://devrev.ai/docs/product/parts).
      operationId: parts_create
      tags:
        - Parts
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartsCreateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: parts-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartsCreateRequest'
  /parts.delete:
    post:
      description: Deletes a [part](https://devrev.ai/docs/product/parts).
      operationId: parts_delete
      tags:
        - Parts
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartsDeleteResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: parts-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartsDeleteRequest'
  /parts.get:
    get:
      description: |
        Gets a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts_get
      tags:
        - Parts
      parameters:
        - name: id
          in: query
          description: The ID of the part to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: parts-get
      security: *ref_0
  /parts.list:
    get:
      description: |
        Lists a collection of [parts](https://devrev.ai/docs/product/parts).
      operationId: parts_list
      tags:
        - Parts
      parameters:
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            The maximum number of parts to return. The default is '50'.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/ListMode'
        - name: name
          in: query
          description: Filters for parts of the provided name(s).
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Filters for parts of the provided type(s).
          required: false
          schema:
            $ref: '#/components/schemas/PartType'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartsListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: parts-list
      security: *ref_0
  /parts.update:
    post:
      description: |
        Updates a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts_update
      tags:
        - Parts
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartsUpdateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: parts-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartsUpdateRequest'
  /rev-orgs.create:
    post:
      description: |
        Creates a Rev organization in the authenticated user's Dev
        organization.
      operationId: revOrgs_create
      tags:
        - RevOrgs
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevOrgsCreateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: rev-orgs-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevOrgsCreateRequest'
  /rev-orgs.delete:
    post:
      description: Deletes the Rev organization.
      operationId: revOrgs_delete
      tags:
        - RevOrgs
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevOrgsDeleteResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: rev-orgs-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevOrgsDeleteRequest'
  /rev-orgs.get:
    get:
      description: Retrieves the Rev organization's information.
      operationId: revOrgs_get
      tags:
        - RevOrgs
      parameters:
        - name: id
          in: query
          description: The ID of the required Rev organization.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevOrgsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: rev-orgs-get
      security: *ref_0
  /rev-orgs.list:
    get:
      description: |
        Gets the list of Rev organizations' information belonging to the
        authenticated user's Dev Organization which the user is also authorized
        to access.
      operationId: revOrgs_list
      tags:
        - RevOrgs
      parameters:
        - name: created_by
          in: query
          description: Filters by creator.
          required: false
          schema:
            type: string
        - name: created_date.after
          in: query
          description: >
            Filters for objects created after the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
        - name: created_date.before
          in: query
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            The maximum number of Rev organizations to be retrieved per page.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/ListMode'
        - name: modified_date.after
          in: query
          description: >
            Filters for objects created after the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
        - name: modified_date.before
          in: query
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
        - name: sort_by
          in: query
          description: |
            Fields to sort the Rev organizations by and the direction to sort
            them.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevOrgsListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: rev-orgs-list
      security: *ref_0
  /rev-orgs.update:
    post:
      description: Updates the Rev organization's information.
      operationId: revOrgs_update
      tags:
        - RevOrgs
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevOrgsUpdateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: rev-orgs-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevOrgsUpdateRequest'
  /tags.create:
    post:
      description: |
        Creates a new tag, which is used to create associations between objects
        and a logical concept denoted by the tag's name.
      operationId: tags_create
      tags:
        - Tags
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsCreateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: tags-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagsCreateRequest'
  /tags.delete:
    post:
      description: Deletes a tag.
      operationId: tags_delete
      tags:
        - Tags
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsDeleteResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: tags-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagsDeleteRequest'
  /tags.get:
    get:
      description: Gets a tag's information.
      operationId: tags_get
      tags:
        - Tags
      parameters:
        - name: id
          in: query
          description: The requested tag's ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: tags-get
      security: *ref_0
  /tags.list:
    get:
      description: Lists the available tags.
      operationId: tags_list
      tags:
        - Tags
      parameters:
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of tags to return. The default is '50'.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/ListMode'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: tags-list
      security: *ref_0
  /tags.update:
    post:
      description: Updates a tag's information.
      operationId: tags_update
      tags:
        - Tags
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsUpdateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: tags-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagsUpdateRequest'
  /timeline-entries.create:
    post:
      description: Creates a new entry on an object's timeline.
      operationId: timelineEntries_create
      tags:
        - TimelineEntries
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineEntriesCreateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: timeline-entries-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimelineEntriesCreateRequest'
  /timeline-entries.get:
    get:
      description: Gets an entry on an object's timeline.
      operationId: timelineEntries_get
      tags:
        - TimelineEntries
      parameters:
        - name: id
          in: query
          description: The ID of the timeline entry to get.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineEntriesGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: timeline-entries-get
      security: *ref_0
  /timeline-entries.list:
    get:
      description: Lists the timeline entries for an object.
      operationId: timelineEntries_list
      tags:
        - TimelineEntries
      parameters:
        - name: object
          in: query
          description: The ID of the object to list timeline entries for.
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            The maximum number of entries to return. If not set, then this
            defaults to `50`.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/ListMode'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineEntriesListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: timeline-entries-list
      security: *ref_0
  /timeline-entries.update:
    post:
      description: Updates an entry on an object's timeline.
      operationId: timelineEntries_update
      tags:
        - TimelineEntries
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineEntriesUpdateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: timeline-entries-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimelineEntriesUpdateRequest'
  /webhooks.create:
    post:
      description: Creates a new webhook target.
      operationId: webhooks_create
      tags:
        - Webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksCreateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: webhooks-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhooksCreateRequest'
  /webhooks.delete:
    post:
      description: Deletes the requested webhook.
      operationId: webhooks_delete
      tags:
        - Webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksDeleteResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: webhooks-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhooksDeleteRequest'
  /webhooks.get:
    get:
      description: Gets the requested webhook's information.
      operationId: webhooks_get
      tags:
        - Webhooks
      parameters:
        - name: id
          in: query
          description: ID for the webhook.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: webhooks-get
      security: *ref_0
  /webhooks.list:
    get:
      description: Lists the webhooks.
      operationId: webhooks_list
      tags:
        - Webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: webhooks-list
      security: *ref_0
  /webhooks.update:
    post:
      description: Updates the requested webhook.
      operationId: webhooks_update
      tags:
        - Webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksUpdateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: webhooks-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhooksUpdateRequest'
  /works.create:
    post:
      description: |
        Creates new work ([issue](https://devrev.ai/docs/product/build),
        [ticket](https://devrev.ai/docs/product/support)) item.
      operationId: works_create
      tags:
        - Works
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksCreateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: works-create
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorksCreateRequest'
  /works.delete:
    post:
      description: Deletes a work item.
      operationId: works_delete
      tags:
        - Works
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksDeleteResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: works-delete
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorksDeleteRequest'
  /works.export:
    get:
      description: Exports a collection of work items.
      operationId: works_export
      tags:
        - Works
      parameters:
        - name: applies_to_part
          in: query
          description: |
            Filters for work belonging to any of the provided parts.
          required: false
          schema:
            type: string
        - name: created_by
          in: query
          description: |
            Filters for work created by any of these users.
          required: false
          schema:
            type: string
        - name: first
          in: query
          description: >
            The number of work items to return. The default is '50', the maximum
            is '5000'.
          required: false
          schema:
            type: integer
        - name: issue.priority
          in: query
          description: |
            Filters for issues with any of the provided priorities.
          required: false
          schema:
            $ref: '#/components/schemas/IssuePriority'
        - name: owned_by
          in: query
          description: |
            Filters for work owned by any of these users.
          required: false
          schema:
            type: string
        - name: stage.name
          in: query
          description: |
            Filters for records in the provided stage(s).
          required: false
          schema:
            type: string
        - name: target_close_date.after
          in: query
          description: >
            Filters for objects created after the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
        - name: target_close_date.before
          in: query
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
        - name: ticket.rev_org
          in: query
          description: |
            Filters for tickets that are associated with any of the provided Rev
            organizations.
          required: false
          schema:
            type: string
        - name: ticket.severity
          in: query
          description: |
            Filters for tickets with any of the provided severities.
          required: false
          schema:
            $ref: '#/components/schemas/TicketSeverity'
        - name: type
          in: query
          description: Filters for work of the provided types.
          required: false
          schema:
            $ref: '#/components/schemas/WorkType'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksExportResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: works-export
      security: *ref_0
  /works.get:
    get:
      description: Gets a work item's information.
      operationId: works_get
      tags:
        - Works
      parameters:
        - name: id
          in: query
          description: The work's ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      security: *ref_0
  /works.list:
    get:
      description: Lists a collection of work items.
      operationId: works_list
      tags:
        - Works
      parameters:
        - name: applies_to_part
          in: query
          description: |
            Filters for work belonging to any of the provided parts.
          required: false
          schema:
            type: string
        - name: created_by
          in: query
          description: |
            Filters for work created by any of these users.
          required: false
          schema:
            type: string
        - name: cursor
          in: query
          description: >
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          required: false
          schema:
            type: string
        - name: issue.priority
          in: query
          description: |
            Filters for issues with any of the provided priorities.
          required: false
          schema:
            $ref: '#/components/schemas/IssuePriority'
        - name: limit
          in: query
          description: |
            The maximum number of works to return. The default is '50'.
          required: false
          schema:
            type: integer
        - name: mode
          in: query
          description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          required: false
          schema:
            $ref: '#/components/schemas/ListMode'
        - name: owned_by
          in: query
          description: |
            Filters for work owned by any of these users.
          required: false
          schema:
            type: string
        - name: stage.name
          in: query
          description: |
            Filters for records in the provided stage(s).
          required: false
          schema:
            type: string
        - name: target_close_date.after
          in: query
          description: >
            Filters for objects created after the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
        - name: target_close_date.before
          in: query
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          required: false
          schema:
            type: string
        - name: ticket.rev_org
          in: query
          description: |
            Filters for tickets that are associated with any of the provided Rev
            organizations.
          required: false
          schema:
            type: string
        - name: ticket.severity
          in: query
          description: |
            Filters for tickets with any of the provided severities.
          required: false
          schema:
            $ref: '#/components/schemas/TicketSeverity'
        - name: type
          in: query
          description: Filters for work of the provided types.
          required: false
          schema:
            $ref: '#/components/schemas/WorkType'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: works-list
      security: *ref_0
  /works.update:
    post:
      description: Updates a work item's information.
      operationId: works_update
      tags:
        - Works
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksUpdateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      summary: works-update
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorksUpdateRequest'
components:
  schemas:
    ArtifactsLocateResponse:
      type: object
      description: The response to getting an artifact's download URL.
      properties:
        expires_at:
          type: string
          description: The expiration timestamp of the URL.
        url:
          type: string
          description: The artifact's download URL.
      required:
        - url
    ArtifactsPrepareRequest:
      type: object
      description: The request to prepare a URL to upload a file.
      properties:
        file_name:
          type: string
          description: The name of the file that's being uploaded.
      required:
        - file_name
    ArtifactsPrepareResponse:
      type: object
      description: The response to preparing a URL to upload a file.
      properties:
        form_data:
          type: array
          items:
            $ref: '#/components/schemas/ArtifactsPrepareResponseFormData'
          description: The POST policy form data.
        id:
          type: string
          description: The generated artifact's ID.
        url:
          type: string
          description: The URL that the file's data should be uploaded to.
      required:
        - form_data
        - id
        - url
    ArtifactsPrepareResponseFormData:
      type: object
      properties:
        key:
          type: string
          description: Key of the form field.
        value:
          type: string
          description: Value corresponding to the key.
      required:
        - key
        - value
    DevOrgAuthConnectionsCreateRequest:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsGoogleApps'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - google_apps
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsOidc'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - oidc
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsSaml'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - samlp
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsAzureAd'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - waad
      description: |
        Request to create a new enterprise authentication connection.
      properties:
        display_name:
          description: |
            Display name of the authentication connection. This name will be
            visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          type: string
    DevOrgAuthConnectionsCreateResponse:
      type: object
      description: |
        Response for the request to create a new enterprise authentication
        connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/AuthConnection'
      required:
        - auth_connection
    DevOrgAuthConnectionsCreateRequestType:
      type: string
      enum:
        - google_apps
        - oidc
        - samlp
        - waad
      description: |
        Defines the type for the authentication connection. Different types of
        authentication connections have different configuration parameters.
    AuthConnectionOptionsAzureAd:
      type: object
      description: |
        Object encapsulating the configuration parameters for an Azure AD
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Azure authentication connection.
        client_secret:
          type: string
          description: Client secret for the Azure authentication connection.
        domain:
          type: string
          description: Domain URL of the Azure authentication connection.
    AuthConnectionOptionsGoogleApps:
      type: object
      description: |
        Object encapsulating the configuration parameters for a Google Apps
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Google Apps authentication connection.
        client_secret:
          type: string
          description: |
            Client secret for the Google Apps authentication connection.
        tenant_domain:
          type: string
          description: |
            Tenant domain URL of the Google Apps authentication connection.
    AuthConnectionOptionsOidc:
      type: object
      description: |
        Object encapsulating the configuration parameters for an OIDC
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the OIDC authentication connection.
        client_secret:
          type: string
          description: Client secret for the OIDC authentication connection.
        issuer:
          type: string
          description: Issuer URL of the OIDC authentication connection.
    AuthConnectionOptionsSaml:
      type: object
      description: |
        Object encapsulating the configuration parameters for a SAML
        authentication connection.
      properties:
        sign_in_endpoint:
          type: string
          description: Sign In endpoint for the SAML authentication connection.
        signing_cert:
          type: string
          description: |
            Signing certificate for the SAML authentication connection.
    AuthConnection:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsGoogleApps'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - google_apps
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsOidc'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - oidc
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsSaml'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - samlp
        - type: object
          properties:
            type:
              type: string
              enum:
                - social
            value:
              $ref: '#/components/schemas/AuthConnectionOptionsSocial'
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsAzureAd'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - waad
      description: |
        Connection object that specifies the configuration for an
        authentication connection that is set up for a Dev organization.
      properties:
        display_name:
          description: |
            Display name of the authentication connection. This name will be
            visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          type: string
        enabled:
          description: |
            Whether the authentication connection is enabled or disabled. If
            set to false, the authentication connection will not show up on the
            login screen as a login option.
          type: boolean
        id:
          description: ID of the authentication connection.
          type: string
    AuthConnectionType:
      type: string
      enum:
        - google_apps
        - oidc
        - samlp
        - social
        - waad
      description: |
        Defines the type for the authentication connection. The configuration
        for each authentication connection will depend on the type value.
    AuthConnectionOptionsSocial:
      type: object
      additionalProperties: {}
    DevOrgAuthConnectionsDeleteRequest:
      type: object
      description: |
        Request to delete an enterprise authentication connection for a Dev
        organization. A default connection and a connection which is currently
        enabled cannot be deleted.
      properties:
        id:
          type: string
          description: ID of the authentication connection to be deleted.
      required:
        - id
    DevOrgAuthConnectionsGetResponse:
      type: object
      description: |
        Response object encapsulating the configuration details of an
        authentication connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/AuthConnection'
      required:
        - auth_connection
    DevOrgAuthConnectionsListResponse:
      type: object
      description: |
        Response object for the request to list all the social and enterprise
        authentication connections configured for a Dev organization.
      properties:
        auth_connections:
          type: array
          items:
            $ref: '#/components/schemas/AuthConnection'
          description: |
            List of all the authentication connections currently configured for
            a Dev organization.
      required:
        - auth_connections
    DevOrgAuthConnectionsToggleRequest:
      type: object
      description: |
        Request to enable or disable an authentication connection for a Dev
        organization.
      properties:
        id:
          type: string
          description: ID of the authentication connection to be toggled.
        toggle:
          $ref: '#/components/schemas/AuthConnectionToggle'
      required:
        - id
    AuthConnectionToggle:
      type: string
      enum:
        - disable
        - enable
    DevOrgAuthConnectionsUpdateRequest:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsGoogleApps'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - google_apps
        - type: object
          properties:
            type:
              type: string
              enum:
                - none
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsOidc'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - oidc
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsSaml'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - samlp
        - type: object
          allOf:
            - $ref: '#/components/schemas/AuthConnectionOptionsAzureAd'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - waad
      description: |
        Request to update an enterprise authentication connection for a Dev
        organization.
      properties:
        display_name:
          description: |
            New display name of the authentication connection. This name will
            be visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          type: string
        id:
          description: |
            ID of the authentication connection which is to be updated.
          type: string
    DevOrgAuthConnectionsUpdateResponse:
      type: object
      description: |
        Response for the request to update an enterprise authentication
        connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/AuthConnection'
      required:
        - auth_connection
    DevOrgAuthConnectionsUpdateRequestType:
      type: string
      enum:
        - google_apps
        - none
        - oidc
        - samlp
        - waad
      description: |
        Specifies the type for the authentication connection. Different types
        of authentication connections have different configuration parameters
        that can be updated.
    AuthTokensCreateRequest:
      type: object
      description: |
        A request to create a new token corresponding to the requested token
        type.
      properties:
        aud:
          type: array
          items:
            type: string
          description: The expected audience values with respect to the token.
        client_id:
          type: string
          description: |
            An identifier that represents the application which is requesting
            the token. If no client_id is present in the request to generate an
            application access token (AAT), DevRev will generate a client_id.
            This client_id is only associated with an AAT.
        expires_in:
          type: integer
          description: |
            The expected validity lifetime of the token in number of days.
        grant_type:
          $ref: '#/components/schemas/AuthTokenGrantType'
        requested_token_type:
          $ref: '#/components/schemas/AuthTokenRequestedTokenType'
        rev_info:
          $ref: '#/components/schemas/AuthTokensRevInfo'
        scope:
          type: string
          description: |
            The requested set of scopes associated with the issued token. A
            space-delimited list of values in which the order of values does
            not matter.
        subject_token:
          type: string
          description: |
            Represents the entity that requests the token. Not required when
            requesting an application access token (AAT).
        subject_token_type:
          $ref: '#/components/schemas/AuthTokenSubjectTokenType'
        token_hint:
          type: string
          description: A hint that identifies the token.
    AuthTokensCreateResponse:
      type: object
      description: |
        Response for the request to create a new token corresponding to the
        requested token type.
      properties:
        access_token:
          type: string
          description: |
            The issued JSON Web Token (JWT) corresponding to the requested
            token type.
        client_id:
          type: string
          description: |
            An identifier that represents the application which is requesting
            the token. Only present in a response corresponding to an
            application access token (AAT).
        expires_in:
          type: integer
          description: |
            The validity lifetime of the token specified in seconds since Unix
            epoch.
        refresh_token:
          type: string
          description: A token to refresh the issued token.
        scope:
          type: string
          description: |
            The scopes associated with the issued token. A space-delimited list
            of values in which the order of values does not matter.
        token_type:
          $ref: '#/components/schemas/AuthTokenTokenType'
      required:
        - access_token
        - expires_in
        - token_type
    AuthTokenGrantType:
      type: string
      enum:
        - urn:devrev:params:oauth:grant-type:token-issue
        - urn:ietf:params:oauth:grant-type:token-exchange
      description: Specifies the process of obtaining a token.
    AuthTokenRequestedTokenType:
      type: string
      enum:
        - urn:devrev:params:oauth:token-type:aat
        - urn:devrev:params:oauth:token-type:aat:public
        - urn:devrev:params:oauth:token-type:dev
        - urn:devrev:params:oauth:token-type:pat
        - urn:devrev:params:oauth:token-type:rev
        - urn:devrev:params:oauth:token-type:session
        - urn:devrev:params:oauth:token-type:session:dev0
        - urn:devrev:params:oauth:token-type:sys
        - urn:ietf:params:oauth:token-type:jwt
      description: The type of the requested token.
    AuthTokensRevInfo:
      type: object
      description: |
        Carries info corresponding to the Rev user to be provisioned and/or
        issue a Rev session token.
      properties:
        org_ref:
          type: string
          description: An identifier which uniquely identifies a Rev org.
        org_traits:
          $ref: '#/components/schemas/AuthTokensOrgTraits'
        user_ref:
          type: string
          description: An identifier which uniquely identifies a Rev user.
        user_traits:
          $ref: '#/components/schemas/AuthTokensUserTraits'
      required:
        - user_ref
    AuthTokensOrgTraits:
      type: object
      description: Carries Rev org info.
      properties:
        display_name:
          type: string
          description: The display name of the Rev org.
        domain:
          type: string
          description: The domain of the Rev org.
    AuthTokensUserTraits:
      type: object
      description: Carries Rev user info.
      properties:
        display_name:
          type: string
          description: The display name of the Rev user.
        email:
          type: string
          description: The email address of the Rev user.
        full_name:
          type: string
          description: The full name of the Rev user.
    AuthTokenSubjectTokenType:
      type: string
      enum:
        - urn:devrev:params:oauth:token-type:jwt:auth0
        - urn:devrev:params:oauth:token-type:jwt:dev
        - urn:devrev:params:oauth:token-type:revinfo
        - urn:devrev:params:oauth:token-type:sysu
        - urn:devrev:params:oauth:token-type:userinfo
        - urn:devrev:params:oauth:token-type:userinfo:profile
        - urn:ietf:params:oauth:token-type:jwt
      description: The type of the subject token.
    AuthTokenTokenType:
      type: string
      enum:
        - bearer
      description: |
        The type of the issued token. Bearer is the only supported token type.
    AuthTokensDeleteRequest:
      type: object
      description: The request to revoke the token.
      properties:
        token_id:
          type: string
          description: |
            The unique identifier for the token under a given Dev organization.
            If no token ID is provided, then the token ID will be set from the
            JTI claim of the token in the authorization header.
    AuthTokensGetResponse:
      type: object
      description: The response to get the token metadata.
      properties:
        token:
          $ref: '#/components/schemas/AuthToken'
      required:
        - token
    AuthToken:
      type: object
      properties:
        client_id:
          type: string
          description: |
            An identifier that represents the application that requested the
            token. Only applicable for application access tokens.
        expires_at:
          type: string
          description: The time at which the token expires.
        issued_at:
          type: string
          description: The time at which the token was issued.
        requested_token_type:
          $ref: '#/components/schemas/AuthTokenRequestedTokenType'
        scopes:
          type: array
          items:
            type: string
          description: The scopes associated with the issued token.
        status:
          $ref: '#/components/schemas/AuthTokenStatus'
        subject:
          type: string
          description: The subject of the token.
        token_hint:
          type: string
          description: A hint that identifies the token.
      allOf:
        - $ref: '#/components/schemas/AtomBase'
    AuthTokenStatus:
      type: string
      enum:
        - active
        - expired
        - revoked
      description: The status of the token.
    AuthTokensListResponse:
      type: object
      description: The response to list the token metadata.
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/AuthToken'
          description: The list of token metadata.
      required:
        - tokens
    AuthTokensSelfDeleteRequest:
      type: object
      description: |
        The request to delete all the tokens created by the authenticated user,
        that match with the provided token type.
      properties:
        requested_token_type:
          $ref: '#/components/schemas/AuthTokenRequestedTokenType'
    AuthTokensUpdateRequest:
      type: object
      description: A request to update the token metadata.
      properties:
        token_hint:
          type: string
          description: A hint that identifies the token.
        token_id:
          type: string
          description: |
            The unique identifier of the token under a given Dev organization.
      required:
        - token_hint
        - token_id
    AuthTokensUpdateResponse:
      type: object
      description: Response for the request to update the token metadata.
      properties:
        token:
          $ref: '#/components/schemas/AuthToken'
      required:
        - token
    AtomBase:
      type: object
      properties:
        created_by:
          $ref: '#/components/schemas/UserSummary'
        created_date:
          type: string
          description: Timestamp when the object was created.
        display_id:
          type: string
          description: Human-readable object ID unique to the Dev organization.
        id:
          type: string
          description: Globally unique object ID.
        modified_by:
          $ref: '#/components/schemas/UserSummary'
        modified_date:
          type: string
          description: Timestamp when the object was last modified.
      required:
        - id
    UserSummary:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/DevUserSummary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - dev_user
        - type: object
          allOf:
            - $ref: '#/components/schemas/RevUserSummary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - rev_user
        - type: object
          allOf:
            - $ref: '#/components/schemas/SysUserSummary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - sys_user
    UserType:
      type: string
      enum:
        - dev_user
        - rev_user
        - sys_user
    DevUserSummary:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/UserBaseSummary'
    UserBaseSummary:
      type: object
      properties:
        display_name:
          type: string
          description: |
            The user's display name. The name is non-unique and mutable.
        email:
          type: string
          description: Email address of the user.
        full_name:
          type: string
          description: Full name of the user.
        profile_picture:
          type: string
          description: URL of the user's profile picture.
        state:
          $ref: '#/components/schemas/UserState'
      allOf:
        - $ref: '#/components/schemas/AtomBaseSummary'
    AtomBaseSummary:
      type: object
      properties:
        display_id:
          type: string
          description: Human-readable object ID unique to the Dev organization.
        id:
          type: string
          description: Globally unique object ID.
      required:
        - id
    UserState:
      type: string
      enum:
        - active
        - deactivated
        - locked
        - shadow
        - unassigned
      description: State of the user.
    RevUserSummary:
      type: object
      properties:
        rev_org:
          $ref: '#/components/schemas/OrgSummary'
      allOf:
        - $ref: '#/components/schemas/UserBaseSummary'
    OrgSummary:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/RevOrgSummary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - rev_org
    OrgType:
      type: string
      enum:
        - rev_org
    RevOrgSummary:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/OrgBaseSummary'
    OrgBaseSummary:
      type: object
      properties:
        display_name:
          type: string
          description: Name of the Organization.
      allOf:
        - $ref: '#/components/schemas/AtomBaseSummary'
    SysUserSummary:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/UserBaseSummary'
    ListMode:
      type: string
      enum:
        - after
        - before
      description: |
        The iteration mode to use. If "after", then entries after the provided
        cursor will be returned, or if no cursor is provided, then from the
        beginning. If "before", then entries before the provided cursor will be
        returned, or if no cursor is provided, then from the end. Entries will
        always be returned in the specified sort-by order.
    PartType:
      type: string
      enum:
        - product
    ArtifactSummary:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/AtomBaseSummary'
    Stage:
      type: object
      description: Describes the current stage of a work item.
      properties:
        name:
          type: string
          description: Current stage name of the work item.
      required:
        - name
    TagWithValue:
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/TagSummary'
        value:
          type: string
          description: The value for the object's association with the tag.
      required:
        - tag
    TagSummary:
      type: object
      properties:
        name:
          type: string
          description: |
            The name of the tag, which denotes the logical concept by which all
            tagged objects will be associated. The name is guaranteed to be
            unique.
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/AtomBaseSummary'
    ErrorBase:
      type: object
      properties:
        message:
          type: string
          description: The message associated with the error.
    DevUsersListResponse:
      type: object
      description: The response to listing the Dev users.
      properties:
        dev_users:
          type: array
          items:
            $ref: '#/components/schemas/DevUser'
          description: The list of Dev users.
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
      required:
        - dev_users
    DevUser:
      type: object
      properties:
        external_identities:
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentity'
          description: IDs of the Dev User outside the DevRev SOR.
      allOf:
        - $ref: '#/components/schemas/UserBase'
    UserBase:
      type: object
      properties:
        display_name:
          type: string
          description: |
            The user's display name. The name is non-unique and mutable.
        email:
          type: string
          description: Email address of the user.
        full_name:
          type: string
          description: Full name of the user.
        phone_numbers:
          type: array
          items:
            type: string
          description: Phone numbers of the user.
        profile_picture:
          type: string
          description: URL of the user's profile picture.
        state:
          $ref: '#/components/schemas/UserState'
      allOf:
        - $ref: '#/components/schemas/AtomBase'
    ExternalIdentity:
      type: object
      additionalProperties: {}
      description: External identity of a user.
    DevUsersSelfResponse:
      type: object
      description: |
        The response to getting the information for the authenticated user.
      properties:
        dev_user:
          $ref: '#/components/schemas/DevUser'
      required:
        - dev_user
    PartsCreateRequest:
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - capability
            value:
              $ref: '#/components/schemas/PartsCreateRequestCapability'
        - type: object
          properties:
            type:
              type: string
              enum:
                - feature
            value:
              $ref: '#/components/schemas/PartsCreateRequestFeature'
        - type: object
          properties:
            type:
              type: string
              enum:
                - product
            value:
              $ref: '#/components/schemas/PartsCreateRequestProduct'
      properties:
        description:
          description: Description of the part.
          type: string
        name:
          description: Name of the part.
          type: string
        owned_by:
          description: The users that own the part.
          type: array
          items:
            type: string
    PartsCreateResponse:
      type: object
      properties:
        part:
          $ref: '#/components/schemas/Part'
      required:
        - part
    PartsCreateRequestCapability: {}
    PartsCreateRequestFeature: {}
    PartsCreateRequestProduct: {}
    Part:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/Product'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - product
    Product:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/PartBase'
    PartBase:
      type: object
      properties:
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/ArtifactSummary'
          description: The attached artifacts.
        description:
          type: string
          description: Description of the part.
        name:
          type: string
          description: Name of the part.
        owned_by:
          type: array
          items:
            $ref: '#/components/schemas/UserSummary'
          description: The users that own the part.
        stage:
          $ref: '#/components/schemas/Stage'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagWithValue'
          description: Tags associated with the object.
      required:
        - owned_by
      allOf:
        - $ref: '#/components/schemas/AtomBase'
    PartsDeleteRequest:
      type: object
      properties:
        id:
          type: string
          description: The ID of the part to delete.
      required:
        - id
    PartsDeleteResponse:
      type: object
      additionalProperties: {}
    PartsGetResponse:
      type: object
      properties:
        part:
          $ref: '#/components/schemas/Part'
      required:
        - part
    PartsListResponse:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
          description: The list of parts.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
      required:
        - parts
    PartsUpdateRequest:
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - capability
            value:
              $ref: '#/components/schemas/PartsUpdateRequestCapability'
        - type: object
          properties:
            type:
              type: string
              enum:
                - feature
            value:
              $ref: '#/components/schemas/PartsUpdateRequestFeature'
        - type: object
          properties:
            type:
              type: string
              enum:
                - none
        - type: object
          properties:
            type:
              type: string
              enum:
                - product
            value:
              $ref: '#/components/schemas/PartsUpdateRequestProduct'
      properties:
        description:
          description: The updated description of the part.
          type: string
        id:
          description: The ID of the part to update.
          type: string
        name:
          description: The updated name of the part.
          type: string
    PartsUpdateResponse:
      type: object
      properties:
        part:
          $ref: '#/components/schemas/Part'
      required:
        - part
    PartsUpdateRequestCapability:
      type: object
      additionalProperties: {}
    PartsUpdateRequestFeature:
      type: object
      additionalProperties: {}
    PartsUpdateRequestProduct:
      type: object
      additionalProperties: {}
    RevOrgsCreateRequest:
      type: object
      description: |
        Request object to create a new Rev organization in the Dev
        organization.
      properties:
        description:
          type: string
          description: Description of the Rev organization.
        display_name:
          type: string
          description: Name of the Rev organization.
        domain:
          type: string
          description: Company's domain name. Example - 'devrev.ai'.
        environment:
          $ref: '#/components/schemas/OrgEnvironment'
        external_ref:
          type: string
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
      required:
        - display_name
    RevOrgsCreateResponse:
      type: object
      description: |
        Response object for request to create a new Rev organization.
      properties:
        rev_org:
          $ref: '#/components/schemas/RevOrg'
      required:
        - rev_org
    OrgEnvironment:
      type: string
      enum:
        - production
        - staging
        - test
      description: |
        The environment of the Org. Defaults to 'production' if not specified.
    RevOrg:
      type: object
      properties:
        description:
          type: string
          description: Description of the Rev organization.
        domain:
          type: string
          description: Company's domain name. Example - 'devrev.ai'.
        external_ref:
          type: string
          description: |
            External ref is a unique identifier for the Rev (customer)
            organization from your primary customer system of records. If none
            is specified, a system-generated identifier will be assigned to the
            organization.
      allOf:
        - $ref: '#/components/schemas/OrgBase'
    OrgBase:
      type: object
      properties:
        display_name:
          type: string
          description: Name of the Organization.
      allOf:
        - $ref: '#/components/schemas/AtomBase'
    RevOrgsDeleteRequest:
      type: object
      description: Request object to delete a Rev organization.
      properties:
        id:
          type: string
          description: The ID of Rev organization to delete.
      required:
        - id
    RevOrgsDeleteResponse:
      type: object
      additionalProperties: {}
      description: The response to deleting a Rev organization.
    RevOrgsGetResponse:
      type: object
      description: The response to getting a Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/RevOrg'
      required:
        - rev_org
    RevOrgsListResponse:
      type: object
      description: |
        The response to getting a list of Rev organizations' information.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
        rev_orgs:
          type: array
          items:
            $ref: '#/components/schemas/RevOrg'
          description: List with all of the Rev organizations' information.
      required:
        - rev_orgs
    RevOrgsUpdateRequest:
      type: object
      description: |
        Request object to update information of the Rev organization.
      properties:
        description:
          type: string
          description: Description of the Rev organization.
        display_name:
          type: string
          description: Customer chosen name for the Rev organization.
        domain:
          type: string
          description: Company's domain name. Example - 'devrev.ai'.
        environment:
          $ref: '#/components/schemas/OrgEnvironment'
        external_ref:
          type: string
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
        id:
          type: string
          description: The ID of Rev organization to update.
      required:
        - id
    RevOrgsUpdateResponse:
      type: object
      description: Response object to updating Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/RevOrg'
      required:
        - rev_org
    TagsCreateRequest:
      type: object
      description: The request to create a new tag.
      properties:
        allowed_values:
          type: array
          items:
            type: string
          description: |
            The allowed values for the tag, or empty if no values are
            permitted.
        description:
          type: string
          description: The description for the tag.
        name:
          type: string
          description: |
            The name for the tag, which must be unique across all tags.
      required:
        - name
    TagsCreateResponse:
      type: object
      description: The response to creating a new tag.
      properties:
        tag:
          $ref: '#/components/schemas/Tag'
      required:
        - tag
    Tag:
      type: object
      properties:
        allowed_values:
          type: array
          items:
            type: string
          description: |
            The allowed values for the tag, where a value is provided when a
            tag is associated with an object. If empty, then no value should be
            provided when the association is made.
        description:
          type: string
          description: |
            An informative description for the tag that should provide context
            on the tag's purpose and usage.
        name:
          type: string
          description: |
            The name of the tag, which denotes the logical concept by which all
            tagged objects will be associated. The name is guaranteed to be
            unique.
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/AtomBase'
    TagsDeleteRequest:
      type: object
      description: The request to delete a tag.
      properties:
        id:
          type: string
          description: The ID of the tag to delete.
      required:
        - id
    TagsDeleteResponse:
      type: object
      additionalProperties: {}
      description: The response for deleting a tag.
    TagsGetResponse:
      type: object
      description: The response to getting a tag's information.
      properties:
        tag:
          $ref: '#/components/schemas/Tag'
      required:
        - tag
    TagsListResponse:
      type: object
      description: The response to listing the tags.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: The list of tags.
      required:
        - tags
    TagsUpdateRequest:
      type: object
      description: The request to update a tag.
      properties:
        allowed_values:
          $ref: '#/components/schemas/TagsUpdateAllowedValues'
        description:
          type: string
          description: The updated description of the tag.
        id:
          type: string
          description: The ID of the tag to update.
        name:
          type: string
          description: |
            The updated name of the tag. The name must be unique across all
            tags.
      required:
        - id
    TagsUpdateResponse:
      type: object
      description: The response for updating a tag.
      properties:
        tag:
          $ref: '#/components/schemas/Tag'
      required:
        - tag
    TagsUpdateAllowedValues:
      type: object
      description: Specifies an update to a tag's allowed values.
      properties:
        set:
          type: array
          items:
            type: string
          description: Sets the allowed values for the tag.
    TimelineEntriesCreateRequest:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/TimelineEntriesCreateRequestTimelineComment'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - timeline_comment
      description: The request to create a timeline entry for an object.
      properties:
        object:
          description: The ID of the object to create the timeline entry for.
          type: string
    TimelineEntriesCreateResponse:
      type: object
      description: The response to creating a timeline entry for an object.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/TimelineEntry'
      required:
        - timeline_entry
    TimelineEntriesCreateRequestType:
      type: string
      enum:
        - timeline_comment
    TimelineEntriesCreateRequestTimelineComment:
      type: object
      properties:
        body:
          type: string
          description: The comment's body.
        body_type:
          $ref: '#/components/schemas/TimelineCommentBodyType'
        snap_kit_body:
          type: object
          additionalProperties: {}
          description: The SnapKit body of the comment.
    TimelineCommentBodyType:
      type: string
      enum:
        - snap_kit
        - text
      description: The type of the body to use for the comment.
    TimelineEntry:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/TimelineComment'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - timeline_comment
    TimelineEntryType:
      type: string
      enum:
        - timeline_comment
    TimelineComment:
      type: object
      properties:
        body:
          type: string
          description: |
            The comment's body. If the comment has been deleted, then no body
            will appear in the response.
        body_type:
          $ref: '#/components/schemas/TimelineCommentBodyType'
        snap_kit_body:
          type: object
          additionalProperties: {}
          description: The SnapKit Body of the comment.
      allOf:
        - $ref: '#/components/schemas/TimelineEntryBase'
    TimelineEntryBase:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/AtomBase'
    TimelineEntriesGetResponse:
      type: object
      description: The request to getting a timeline entry.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/TimelineEntry'
      required:
        - timeline_entry
    TimelineEntriesListResponse:
      type: object
      description: The response to listing timeline entries for an object.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
        timeline_entries:
          type: array
          items:
            $ref: '#/components/schemas/TimelineEntry'
          description: The timeline entries for the object.
      required:
        - timeline_entries
    TimelineEntriesUpdateRequest:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/TimelineEntriesUpdateRequestTimelineComment'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - timeline_comment
      description: The request to update a timeline entry.
      properties:
        id:
          description: The ID of the timeline entry to update.
          type: string
    TimelineEntriesUpdateResponse:
      type: object
      description: The response to updating a timeline entry.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/TimelineEntry'
      required:
        - timeline_entry
    TimelineEntriesUpdateRequestType:
      type: string
      enum:
        - timeline_comment
    TimelineEntriesUpdateRequestTimelineComment:
      type: object
      properties:
        body:
          type: string
          description: The updated comment's body.
        body_type:
          $ref: '#/components/schemas/TimelineCommentBodyType'
        snap_kit_body:
          type: object
          additionalProperties: {}
          description: The SnapKit body of the comment.
    WebhooksCreateRequest:
      type: object
      description: The request to create a new webhook.
      properties:
        event_types:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEventType'
          description: The event types that the webhook endpoint will receive.
        secret:
          type: string
          description: |
            The secret to use when verifying webhook events. If provided, the
            secret must be between 8 and 32 bytes (inclusive). If not set, a
            secret will be automatically generated and provided in the
            response.
        url:
          type: string
          description: The URL of the webhook endpoint.
      required:
        - url
    WebhooksCreateResponse:
      type: object
      description: The response to creating a new webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook'
      required:
        - webhook
    WebhookEventType:
      type: string
      enum:
        - part_created
        - part_deleted
        - part_updated
        - rev_org_created
        - rev_org_deleted
        - rev_org_updated
        - tag_created
        - tag_deleted
        - tag_updated
        - timeline_entry_created
        - timeline_entry_deleted
        - timeline_entry_updated
        - verify
        - work_created
        - work_deleted
        - work_updated
      description: The event types that the webhook will receive.
    Webhook:
      type: object
      properties:
        event_types:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEventType'
          description: The event types that the webhook will receive.
        secret:
          type: string
          description: The secret to use for verifying webhook events.
        status:
          $ref: '#/components/schemas/WebhookStatus'
        url:
          type: string
          description: The URL of the webhook endpoint.
      required:
        - secret
        - status
        - url
      allOf:
        - $ref: '#/components/schemas/AtomBase'
    WebhookStatus:
      type: string
      enum:
        - active
        - inactive
        - unverified
      description: The status of the webhook.
    WebhooksDeleteRequest:
      type: object
      description: The request to delete a webhook.
      properties:
        id:
          type: string
          description: ID for the webhook.
      required:
        - id
    WebhooksDeleteResponse:
      type: object
      additionalProperties: {}
      description: The response to deleting the webhook.
    WebhooksGetResponse:
      type: object
      description: The response to getting the information for the webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook'
      required:
        - webhook
    WebhooksListResponse:
      type: object
      description: The response to listing the webhooks.
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
          description: The list of webhooks.
      required:
        - webhooks
    WebhooksUpdateRequest:
      type: object
      description: The request to update a webhook.
      properties:
        action:
          $ref: '#/components/schemas/WebhooksUpdateAction'
        event_types:
          $ref: '#/components/schemas/WebhooksUpdateRequestEventTypes'
        id:
          type: string
          description: ID for the webhook.
        secret:
          type: string
          description: |
            If provided, updates the secret that's used when verifying webhook
            events, which must be between 8 and 32 bytes (inclusive). Otherwise
            if empty, then a new secret is generated. If the webhook is active,
            then its status will transition to the 'unverified' state and it
            won't receive any object events until successfully verified.
        url:
          type: string
          description: |
            The webhook's updated URL. If the webhook is active, then the
            webhook's status will transition to the 'unverified' state and it
            won't receive any object events until successfully verified.
      required:
        - id
    WebhooksUpdateResponse:
      type: object
      description: The response to updating the webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook'
      required:
        - webhook
    WebhooksUpdateAction:
      type: string
      enum:
        - activate
        - deactivate
      description: The action to update the webhook's status.
    WebhooksUpdateRequestEventTypes:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEventType'
          description: |
            The event types to add. If a provided event type is already set for
            the webhook, then nothing is done. Note this is mutually exclusive
            with 'set'.
        remove:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEventType'
          description: |
            The event types to remove. If a provided event type isn't set for
            the webhook, then nothing is done. Note this is mutually exclusive
            with 'set'.
        set:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEventType'
          description: |
            The updated event types, which will replace the webhook's current
            event types. Note this is mutually exclusive with 'add' and
            'remove'.
    WorksCreateRequest:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/WorksCreateRequestIssue'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - issue
        - type: object
          allOf:
            - $ref: '#/components/schemas/WorksCreateRequestTicket'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - ticket
      properties:
        applies_to_part:
          description: |
            The [part](https://devrev.ai/docs/product/parts) that the work
            applies to. Specifying a part is required when creating tickets and
            issues.
          type: string
        artifacts:
          description: |
            The IDs of the artifacts to associate with the work item.
          type: array
          items:
            type: string
        body:
          description: Body of the work object.
          type: string
        owned_by:
          description: The users that own the work.
          type: array
          items:
            type: string
        reported_by:
          description: The users that reported the work.
          type: array
          items:
            type: string
        stage:
          $ref: '#/components/schemas/StageInit'
        tags:
          description: Tags associated with the work item.
          type: array
          items:
            $ref: '#/components/schemas/SetTagWithValue'
        target_close_date:
          description: Timestamp for when the work is expected to be complete.
          type: string
        title:
          description: Title of the work object.
          type: string
    WorksCreateResponse:
      type: object
      properties:
        work:
          $ref: '#/components/schemas/Work'
      required:
        - work
    StageInit:
      type: object
      description: Sets an object's initial stage.
      properties:
        name:
          type: string
          description: The name of the stage.
      required:
        - name
    SetTagWithValue:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tag.
        value:
          type: string
          description: |
            The value for the object's association with the tag. If specified,
            the value must be one that's specified in the tag's allowed values.
      required:
        - id
    WorkType:
      type: string
      enum:
        - issue
        - ticket
    WorksCreateRequestIssue:
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/IssuePriority'
    IssuePriority:
      type: string
      enum:
        - p0
        - p1
        - p2
        - p3
      description: Priority of the work based upon impact and criticality.
    WorksCreateRequestTicket:
      type: object
      properties:
        rev_org:
          type: string
          description: The Rev organization that the ticket is associated with.
        severity:
          $ref: '#/components/schemas/TicketSeverity'
    TicketSeverity:
      type: string
      enum:
        - blocker
        - high
        - low
        - medium
      description: Severity of the ticket.
    Work:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/Issue'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - issue
        - type: object
          allOf:
            - $ref: '#/components/schemas/Ticket'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - ticket
    Issue:
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/IssuePriority'
      allOf:
        - $ref: '#/components/schemas/WorkBase'
    WorkBase:
      type: object
      properties:
        applies_to_part:
          $ref: '#/components/schemas/PartSummary'
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/ArtifactSummary'
          description: The artifacts attached to the work item.
        body:
          type: string
          description: Body of the work object.
        owned_by:
          type: array
          items:
            $ref: '#/components/schemas/UserSummary'
          description: The users that own the work.
        reported_by:
          type: array
          items:
            $ref: '#/components/schemas/UserSummary'
          description: Users that reported the work.
        stage:
          $ref: '#/components/schemas/Stage'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagWithValue'
          description: Tags associated with the object.
        target_close_date:
          type: string
          description: Timestamp when the work is expected to be complete.
        title:
          type: string
          description: Title of the work object.
      required:
        - owned_by
        - title
      allOf:
        - $ref: '#/components/schemas/AtomBase'
    PartSummary:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/ProductSummary'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - product
    ProductSummary:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/PartBaseSummary'
    PartBaseSummary:
      type: object
      properties:
        name:
          type: string
          description: Name of the part.
      allOf:
        - $ref: '#/components/schemas/AtomBaseSummary'
    Ticket:
      type: object
      properties:
        rev_org:
          $ref: '#/components/schemas/OrgSummary'
        severity:
          $ref: '#/components/schemas/TicketSeverity'
      allOf:
        - $ref: '#/components/schemas/WorkBase'
    WorksDeleteRequest:
      type: object
      properties:
        id:
          type: string
          description: The work's ID.
      required:
        - id
    WorksDeleteResponse:
      type: object
      additionalProperties: {}
    WorksExportResponse:
      type: object
      properties:
        works:
          type: array
          items:
            $ref: '#/components/schemas/Work'
          description: The resulting collection of work items.
      required:
        - works
    WorksGetResponse:
      type: object
      properties:
        work:
          $ref: '#/components/schemas/Work'
      required:
        - work
    WorksListResponse:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
        works:
          type: array
          items:
            $ref: '#/components/schemas/Work'
          description: The list of works.
      required:
        - works
    WorksUpdateRequest:
      oneOf:
        - type: object
          allOf:
            - $ref: '#/components/schemas/WorksUpdateRequestIssue'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - issue
        - type: object
          properties:
            type:
              type: string
              enum:
                - none
        - type: object
          allOf:
            - $ref: '#/components/schemas/WorksUpdateRequestTicket'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - ticket
      properties:
        applies_to_part:
          description: Updates the part that the work applies to.
          type: string
        artifacts:
          $ref: '#/components/schemas/WorksUpdateRequestArtifactIds'
        body:
          description: |
            Updated body of the work object, or unchanged if not provided.
          type: string
        custom_schema_fragments:
          description: The custom schema fragments to use.
          type: array
          items:
            type: string
        id:
          description: The work's ID.
          type: string
        owned_by:
          $ref: '#/components/schemas/WorksUpdateRequestOwnedBy'
        reported_by:
          $ref: '#/components/schemas/WorksUpdateRequestReportedBy'
        stage:
          $ref: '#/components/schemas/StageUpdate'
        tags:
          $ref: '#/components/schemas/WorksUpdateRequestTags'
        target_close_date:
          description: |
            Updates the timestamp for when the work is expected to be complete.
          type: string
        title:
          description: |
            Updated title of the work object, or unchanged if not provided.
          type: string
    WorksUpdateResponse:
      type: object
      properties:
        work:
          $ref: '#/components/schemas/Work'
      required:
        - work
    WorksUpdateRequestArtifactIds:
      type: object
      properties:
        set:
          type: array
          items:
            type: string
          description: Sets the IDs to the provided artifact IDs.
    WorksUpdateRequestOwnedBy:
      type: object
      properties:
        set:
          type: array
          items:
            type: string
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
    WorksUpdateRequestReportedBy:
      type: object
      properties:
        set:
          type: array
          items:
            type: string
          description: |
            Sets the users that reported the work to the provided user IDs.
    StageUpdate:
      type: object
      description: Updates an object's stage.
      properties:
        name:
          type: string
          description: |
            The updated name of the stage, otherwise unchanged if not set.
    WorksUpdateRequestTags:
      type: object
      properties:
        set:
          type: array
          items:
            $ref: '#/components/schemas/SetTagWithValue'
          description: Sets the provided tags on the work item.
    WorksUpdateRequestIssue:
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/IssuePriority'
    WorksUpdateRequestTicket:
      type: object
      properties:
        rev_org:
          type: string
          description: |
            Updates the Rev organization that the ticket is associated with.
        severity:
          $ref: '#/components/schemas/TicketSeverity'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
servers:
  - url: https://api.devrev.ai
    description: Production
